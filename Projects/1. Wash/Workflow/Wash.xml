<?xml version="1.0" encoding="utf-8" ?>
<!--описание бизнес-процесса "Автомойка"-->
<Workflow Table="wash.workflow" IdField="workflow_id" TitleField="title">
  <UserSettings PublicUserTable="public.user" PublicUserIdField="user_id" PublicUserNameField="user_name" PublicUserDomainField="user_domain" PublicUserFullNameField="user_full_name" PublicUserEnabledField="enabled" MessengerUserTable="messenger.user" MessengerUserIdField="user_id" MessengerUserPublicIdField="public_user_id" Table="wash.user" IdField="user_id" PublicIdField="public_user_id" GroupTable="wash.group" GroupIdField="group_id" GroupNameField="name" UserGroupTable="wash.user_group" UserGroupUserIdField="user_id" UserGroupGroupIdField="group_id" GroupGroupTable="wash.group_group" GroupGroupChildIdField="child_group_id" GroupGroupParentIdField="parent_group_id" />
  <HistoryStatesSettings StepTypeTable="wash.step_type" StepTypeTableIdField="step_type_id" StepTypeTableNameField="name" StepTypeTableTitleField="title" StepStatusTable="wash.step_status" StepStatusTableIdField="step_status_id" StepStatusTableNameField="name" StepStatusTableTitleField="title" ExecutedStepStatusTable="wash.executed_step_status" ExecutedStepStatusTableIdField="executed_step_status_id" ExecutedStepStatusTableNameField="name" ExecutedStepStatusTableTitleField="title" ActionTable="wash.action" ActionTableIdField="action_id" ActionTableNameField="name" ActionTableTitleField="title" WorkflowStateTable="wash.workflow_state" WorkflowStateTableIdField="workflow_state_id" WorkflowStateTableWorkflowIdField="workflow_id" WorkflowStateTableActionIdField="action_id" WorkflowStateTableInitiatorIdField="initiator_id" WorkflowStateTableDateField="date" WorkflowStateTableAllowRollbackField="allow_rollback" StepStateTable="wash.step_state" StepStateTableIdField="step_state_id" StepStateTableWorkflowStateIdField="workflow_state_id" StepStateTableStepTypeIdField="step_type_id" StepStateTableStepStatusIdField="step_status_id" StepStateTableExecuteStatusIdField="executed_step_status_id" StepStateTableEditorIdField="editor_id" StepStateWorkflowStateTable="wash.step_state_workflow_state" StepStateWorkflowStateTableStepStateIdField="step_state_id" StepStateWorkflowStateTableWorkflowStateIdField="workflow_state_id" WorkflowTableWorkflowStateIdField="workflow_state_id" WorkflowEngineServiceUserId="0" />
  <ExecutiveSettings GroupTable="wash.executive_group" GroupWorkflowIdField="workflow_id" GroupStepTypeIdField="step_type_id" GroupIdField="group_id" UserTable="wash.executive_user" UserWorkflowIdField="workflow_id" UserStepTypeIdField="step_type_id" UserIdField="user_id" />
  <UpdateSettings TableName="wash.update" QueryNameField="query_name" TableNameField="table_name" TypeField="type" ParameterField="parameter" UserIdField="user_id" DateField="date" />
  <ReplySettings Table="wash.reply" IdField="reply_id" StepTypeIdField="step_type_id" WorkflowIdField="workflow_id" UserIdField="user_id" ReplyIdField="messenger_reply_id" PausedField="paused" />
  <MessageAppearanceSettings Table="wash.message_appearance" IdField="message_appearance_id" StepTypeIdField="step_type_id" MessengerUserIdField="messenger_user_id" MessengerPriorityIdField="messenger_priority_id" ThemeField="theme" ShortField="short" TextField="text" DeadLineField="dead_line" DeadLineShiftField="dead_line_shift" LinkTitleField="link_title" LinkProgramField="link_program" LinkArgumentField="link_argument" StartConditionDateField="start_condition_date" StartConditionDateShiftField="start_condition_date_shift" FinishConditionCountField="finish_condition_count" FinishConditionDateField="finish_condition_date" FinishConditionDateShiftField="finish_condition_date_shift" BrakeConditionCountField="brake_condition_count" PeriodField="period" PeriodVariableField="period_variable" StartHourField="start_hour" FinishHourField="finish_hour" MissedShowPeriodField="missed_show_period" MissedShowPeriodVariableField="missed_show_period_variable" MandatoryLookField="mandatory_look" MandatoryTextField="mandatory_text" MandatoryUrlField="mandatory_url" EnabledField="enabled" />
  <Steps />
  <Conditions />
  <Handlers />
  <Commands />
  <SqlQueries>

    <!--============================================================-->
    <!--===ОБЩЕЕ====================================================-->
    <!--============================================================-->

    <!--запрос на чтение виртуальной таблицы "Права доступа"-->
    <SqlQuery Name="PermissionsSelectSqlQuery">
      <Text>
        SELECT
          public."user".user_full_name AS "CurrentUserFullName",
          CAST({UserId} AS smallint) AS "CurrentUserId",
          (
            SELECT
            (
              SELECT
                group_id
              FROM
                wash.group
              WHERE
                "group".name = 'AdministratorGroup'
            )
            IN
              {UserGroupIds}
          ) AS "CurrentUserIsInAdministratorGroup",
          (
            SELECT
            (
              SELECT
                group_id
              FROM
                wash.group
              WHERE
                "group".name = 'OwnerGroup'
            )
            IN
              {UserGroupIds}
          ) AS "CurrentUserIsInOwnerGroup",
          (
            SELECT
            (
              SELECT
                group_id
              FROM
                wash.group
              WHERE
                "group".name = 'WashAdminGroup'
          )
            IN
              {UserGroupIds}
          ) AS "CurrentUserIsInWashAdminGroup",
          (
            SELECT
            (
              SELECT
                group_id
              FROM
                wash.group
              WHERE
                "group".name = 'AdministratorGroup'
            )
            IN
              {UserGroupIds}
          ) OR
          (
            SELECT
            (
              SELECT
                group_id
              FROM
                wash.group
              WHERE
                "group".name = 'OwnerGroup'
            )
            IN
              {UserGroupIds}
          ) AS "CurrentUserIsInAdministrationGroup"
        FROM
          wash.user
          INNER JOIN public."user" ON public."user".user_id = wash.user.public_user_id
        WHERE
          wash.user.user_id = {UserId}
      </Text>
    </SqlQuery>


    <!--============================================================-->
    <!--===ПОЛЬЗОВАТЕЛИ ДЛЯ РЕГИСТРАЦИИ=============================-->
    <!--============================================================-->

    <!--запрос на чтение таблицы "Пользователи для регистрации"-->
    <SqlQuery Name="LoginUserSelectSqlQuery">
      <Text>
        SELECT
        wash.user.user_id AS "UserId",
        wash.user.public_user_id AS "PublicUserId",
        public.user.user_name AS "UserName",
        public.user.user_domain AS "UserDomain",
        public.user.user_full_name AS "UserFullName"
        FROM
        wash.user
        INNER JOIN
        public.user
        ON
        public.user.user_id = wash.user.public_user_id
        WHERE
        (
        wash.user.user_id NOT IN
        (
        SELECT
        user_id
        FROM
        wash.user_group
        INNER JOIN
        wash."group"
        ON
        "group".group_id = user_group.group_id
        WHERE
        "group".name = 'NotForRegisterGroup'
        )) AND
        (public.user.enabled = True) AND
        (public.user.person = True) AND
        (wash.user.user_id <![CDATA[<>]]> 0)
      </Text>
    </SqlQuery>


    <!--============================================================-->
    <!--===ПОСЛЕДНИЕ ВХОДИВШИЕ ПОЛЬЗОВАТЕЛИ=========================-->
    <!--============================================================-->

    <!--запрос на чтение таблицы "Последние входившие пользователи"-->
    <SqlQuery Name="LastLoginSelectSqlQuery">
      <Text>
        SELECT
        last_user_id AS "LastUserId"
        FROM
        wash.last_login
        WHERE
        (({OriginalUserId} IS NOT NULL) AND
        (user_id = {OriginalUserId})) OR
        (({OriginalUserId} IS NULL) AND
        (user_id = {UserId}))
      </Text>
    </SqlQuery>

    <!--запрос на чтение добавление или обновление элемента таблицы "Последние входившие пользователи" (только поле "Дата")-->
    <SqlQuery Name="LastLoginInsertUpdateSqlQuery">
      <Text>
        INSERT INTO
        wash.last_login
        (
        user_id
        )
        SELECT
        {UserId}
        WHERE
        (
        SELECT
        COUNT(*)
        FROM
        wash.last_login
        WHERE
        (({OriginalUserId} IS NOT NULL) AND
        (user_id = {OriginalUserId})) OR
        (({OriginalUserId} IS NULL) AND
        (user_id = {UserId}))
        ) = 0;
        
        SELECT {UserId}
      </Text>
    </SqlQuery>

    <!--запрос на чтение добавление или обновление элемента таблицы "Последние входившие пользователи"-->
    <SqlQuery Name="LastLoginUpdateSqlQuery">
      <Text>
        UPDATE
        wash.last_login
        SET
        last_user_id = {LastUserId}
        WHERE
        user_id = {UserId}
      </Text>
    </SqlQuery>


    <!--============================================================-->
    <!--===УПРАВЛЕНИЕ ГРУППАМИ ПОЛЬЗОВАТЕЛЕЙ========================-->
    <!--============================================================-->

    <SqlQuery Name="GroupSelectSqlQuery">
      <Text>
        SELECT
        group_id AS "GroupId",
        title AS "Title",
        description AS "Description"
        FROM
        wash.group
      </Text>
    </SqlQuery>

    <SqlQuery Name="GroupGroupSelectSqlQuery">
      <Text>
        SELECT
        group_group_id AS "GroupGroupId",
        child_group_id AS "ChildGroupId",
        parent_group_id AS "ParentGroupId"
        FROM
        wash.group_group
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserGroupSelectSqlQuery">
      <Text>
        SELECT
        user_group.user_group_id AS "UserGroupId",
        user_group.user_id AS "UserId",
        user_group.group_id AS "GroupId"
        FROM
        wash.user_group
        INNER JOIN
        wash.user
        INNER JOIN
        public.user
        ON
        public.user.user_id = wash.user.public_user_id
        ON
        wash.user.user_id = wash.user_group.user_id
        WHERE
        (public.user.enabled = True) AND
        (public.user.person = True) AND
        (wash.user.user_id <![CDATA[<>]]> 0)
      </Text>
    </SqlQuery>

    <SqlQuery Name="GroupUpdateSqlQuery" Type="Update">
      <Updates>
        <Update TableName="group" Type="Update" Parameter="GroupId" />
        <Update TableName="group" Type="Update" Parameter="Title" />
      </Updates>
      <UpdateFields>
        <UpdateField Name="title" Value="Title" />
      </UpdateFields>
      <Text>
        UPDATE
        wash.group
        SET
        {UpdateFields}
        WHERE
        group_id = {GroupId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="GroupGroupInsertSqlQuery">
      <Updates>
        <Update TableName="group_group" Type="Insert" Parameter="Title" />
        <Update TableName="group_group" Type="Insert" Parameter="ParentGroupId" />
      </Updates>
      <Text>
        INSERT INTO
        wash.group
        (
        name,
        title
        )
        VALUES
        (
        'Group' || CURRVAL('wash.group_id_seq'),
        {Title}
        );
        
        INSERT INTO
        wash.group_group
        (
        child_group_id,
        parent_group_id
        )
        VALUES
        (
        CURRVAL('wash.group_id_seq'),
        {ParentGroupId}
        );
        
        SELECT CURRVAL('wash.group_id_seq');
      </Text>
    </SqlQuery>

    <SqlQuery Name="GroupGroupUpdateSqlQuery">
      <Updates>
        <Update TableName="group_group" Type="Update" Parameter="GroupId" />
        <Update TableName="group_group" Type="Update" Parameter="ParentGroupId" />
      </Updates>
      <Text>
        UPDATE
        wash.group_group
        SET
        parent_group_id = {ParentGroupId}
        WHERE
        child_group_id = {GroupId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="GroupGroupDeleteSqlQuery">
      <Updates>
        <Update TableName="group_group" Type="Delete" Parameter="GroupId" />
      </Updates>
      <Text>
        DELETE FROM
        wash.group
        WHERE
        group_id IN
        (
        WITH RECURSIVE
        categories(group_id) AS
        (
        SELECT
        child_group_id
        FROM
        wash.group_group
        WHERE
        parent_group_id = {GroupId}
        UNION ALL
        SELECT
        child_group_id
        FROM
        wash.group_group,
        categories
        WHERE
        parent_group_id = group_id
        )
        SELECT
        group_id
        FROM
        categories
        UNION
        SELECT {GroupId}
        )
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserGroupInsertSqlQuery">
      <Updates>
        <Update TableName="user_group" Type="Insert" Parameter="Name" />
      </Updates>
      <Text>
        INSERT INTO
        wash.user_group
        (
        user_id,
        group_id
        )
        VALUES
        (
        {UserId},
        {GroupId}
        )
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserGroupUpdateSqlQuery" Type="Update">
      <Updates>
        <Update TableName="user_group" Type="Update" Parameter="UserGroupId" />
      </Updates>
      <UpdateFields>
        <UpdateField Name="user_id" Value="UserId" />
        <UpdateField Name="group_id" Value="GroupId" />
      </UpdateFields>
      <Text>
        UPDATE
        wash.user_group
        SET
        {UpdateFields}
        WHERE
        user_group_id = {UserGroupId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserGroupDeleteSqlQuery">
      <Updates>
        <Update TableName="user_group" Type="Delete" Parameter="UserGroupId" />
      </Updates>
      <Text>
        DELETE FROM
        wash.user_group
        WHERE
        user_group_id = {UserGroupId}
      </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--===УПРАВЛЕНИЕ ПОЛЬЗОВАТЕЛЯМИ================================-->
    <SqlQuery Name="PublicUserSelectSqlQuery">
      <Text>
        SELECT
        user_id AS "PublicUserId",
        user_name AS "UserName",
        user_domain AS "UserDomain",
        user_full_name AS "UserFullName",
        enabled AS "Enabled"
        FROM
        public.user
        WHERE
        (enabled = True) AND
        (person = True)
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserSelectSqlQuery">
      <Text>
        SELECT
        wash.user.user_id AS "UserId",
        wash.user.public_user_id AS "PublicUserId",
        public.user.user_name AS "UserName",
        public.user.user_domain AS "UserDomain",
        public.user.user_full_name AS "UserFullName"
        FROM
        wash.user
        INNER JOIN
        public.user
        ON
        public.user.user_id = wash.user.public_user_id
        WHERE
        (public.user.enabled = True) AND
        (public.user.person = True) AND
        (wash.user.user_id <![CDATA[<>]]> 0)
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserInsertSqlQuery">
      <Updates>
        <Update TableName="user" Type="Insert" Parameter="UserId" />
      </Updates>
      <Text>
        INSERT INTO
        wash.user
        (
        public_user_id
        )
        VALUES
        (
        {PublicUserId}
        )
        RETURNING user_id AS "UserId"
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserUpdateSqlQuery" Type="Update">
      <Updates>
        <Update TableName="user" Type="Update" Parameter="UserId" />
      </Updates>
      <UpdateFields>
        <UpdateField Name="public_user_id" Value="PublicUserId" />
      </UpdateFields>
      <Text>
        UPDATE
        wash.user
        SET
        {UpdateFields}
        WHERE
        (user_id = {UserId}) AND
        (user_id <![CDATA[<>]]> 0)
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserDeleteSqlQuery">
      <Updates>
        <Update TableName="user" Type="Delete" Parameter="UserId" />
      </Updates>
      <Text>
        DELETE FROM
        wash.user
        WHERE
        (user_id = {UserId}) AND
        (user_id <![CDATA[<>]]> 0)
      </Text>
    </SqlQuery>


    <!-- - - - - - - - - VIEW ORDERS - - - - - - - - -->
    <SqlQuery Name="OrderMainSelectSqlQuery">
      <Text>
        SELECT
          row_number() OVER (ORDER BY "OrderType" DESC, "Deleted", "OrderDateTime") as "RowNumber",
          *
          FROM
          (
          SELECT
            OL.order_id AS "OrderId",
            OL.order_number AS "OrderNumber",
            OL.order_date AS "OrderTime",
            OL.order_date AS "OrderDateTime",
            (SELECT 
              CV.title || ' ' || COALESCE(CM.title, '') 
            FROM 
              wash.car_vendor CV
              INNER JOIN wash.car_model CM ON CM.car_vendor_id = CV.car_vendor_id 
            WHERE 
              CM.car_model_id = (SELECT car_model_id FROM wash.car WHERE car_id = OL.car_id)
            ) as "Car",
            (SELECT car_number FROM wash.car WHERE car_id = OL.car_id) AS "CarNumber",
            OL.cash + OL.non_cash + OL.terminal AS "Summ",
            array_to_string(( 
              SELECT 
                array_agg(T.work) 
              FROM (
                SELECT
                  CASE 
                    WHEN 
                      category_key = 'truck_spec'
                    THEN 
                      part_number || '.' || work_number || '. ' || title || ' [СПЕЦСРЕДСТВА]'
                    WHEN 
                      category_key != 'truck_spec'
                    THEN 
                      part_number || '.' || work_number || '. ' || title
                    ELSE 
                      title
                  END AS work
                FROM (
                  SELECT 
                    W.title, order_id, work_number, category_key, part_number
                  FROM
                    wash.work W
                    INNER JOIN wash.price P ON P.work_id = W.work_id
                    INNER JOIN wash.order_work OW ON OW.price_id = P.price_id
                    INNER JOIN wash.category C ON P.category_id = C.category_id
                    INNER JOIN wash.part Pa ON Pa.part_id = W.part_id
                  UNION ALL
                  SELECT
                    title, order_id, NULL, NULL, NULL
                  FROM
                    wash.order_other_work
                  UNION ALL
                  SELECT
                    W.title, order_id, NULL, NULL, NULL
                  FROM
                    wash.work W
                    INNER JOIN wash.price P ON P.work_id = W.work_id
                    INNER JOIN wash.order_product OP ON OP.price_id = P.price_id
                  ORDER BY
                    part_number, work_number
                ) Works
                WHERE
                  order_id = OL.order_id
                ) T
              ), E'\r\n'
            ) as "Works",
            OL.comments AS "Comments",
            (SELECT title FROM wash.admin A INNER JOIN wash.shift S ON S.admin_id = A.admin_id WHERE S.shift_id = OL.shift_id) AS "WashAdmin",
            'wash' AS "OrderType",
            OL.deleted AS "Deleted",
            OL.delete_date AS "DeleteDate"
          FROM 
            wash.order_list OL
          WHERE 
            (({IsArchive} AND OL.order_date::date >= {StartDate}::date AND OL.order_date::date <![CDATA[<=]]> {EndDate}::Date)
              OR (NOT {IsArchive} AND OL.shift_id = {ShiftId}))
            
          UNION ALL
          
          SELECT
            TOL.tire_order_id AS "OrderId",
            TOL.order_number AS "OrderNumber",
            TOL.order_date AS "OrderTime",
            TOL.order_date AS "OrderDateTime",
            (
              SELECT 
                CV.title || ' ' || COALESCE(CM.title, '')
              FROM 
                wash.car_vendor CV
                INNER JOIN wash.car_model CM ON CM.car_vendor_id = CV.car_vendor_id
              WHERE 
                CM.car_model_id = (SELECT car_model_id FROM wash.car WHERE car_id = TOL.car_id)
            ) as "Car",
            (SELECT car_number FROM wash.car WHERE car_id = TOL.car_id) AS "CarNumber",
            TOL.cash + TOL.non_cash + TOL.terminal AS "Summ",
            array_to_string(( 
              SELECT 
                array_agg(T.work) 
              FROM (
                SELECT CASE
                  WHEN 
                    category_key LIKE 'tire%'
                  THEN
                    work_number || '. ' || title || ' (' || (SELECT title FROM wash.category WHERE category_key = Works.category_key) || ')'
                  ELSE
                    title
                  END 
                AS work
                FROM(
                  SELECT 
                    W.title, tire_order_id, work_number, category_key
                  FROM
                    wash.work W
                    INNER JOIN wash.price P ON P.work_id = W.work_id
                    INNER JOIN wash.tire_order_work OW ON OW.price_id = P.price_id
                    INNER JOIN wash.category C ON P.category_id = C.category_id
                  UNION ALL
                  SELECT
                    title, tire_order_id, NULL, NULL
                  FROM
                    wash.tire_order_other_work
                  UNION ALL
                  SELECT
                    W.title, tire_order_id, NULL, NULL
                  FROM
                    wash.work W
                    INNER JOIN wash.price P ON P.work_id = W.work_id
                    INNER JOIN wash.tire_order_product OP ON OP.price_id = P.price_id
                  ORDER BY
                    work_number
                ) Works
                WHERE
                  tire_order_id = TOL.tire_order_id
                ORDER BY
                  work
              ) T
              ), E'\r\n'
            ) as "Works",
            TOL.comments AS "Comments",
            (SELECT title FROM wash.admin A INNER JOIN wash.shift S ON S.admin_id = A.admin_id WHERE S.shift_id = TOL.shift_id) AS "WashAdmin",
            'tire' AS "OrderType",
            TOL.deleted AS "Deleted",
            TOL.delete_date AS "DeleteDate"
          FROM
            wash.tire_order_list TOL
          WHERE 
            (({IsArchive} AND TOL.order_date::date >= {StartDate}::date AND TOL.order_date::date <![CDATA[<=]]> {EndDate}::Date)
              OR (NOT {IsArchive} AND TOL.shift_id = {ShiftId}))
          
          UNION ALL
          
          SELECT
            TOL.tire_truck_order_id AS "OrderId",
            TOL.order_number AS "OrderNumber",
            TOL.order_date AS "OrderTime",
            TOL.order_date AS "OrderDateTime",
            (
              SELECT 
                CV.title || ' ' || COALESCE(CM.title, '')
              FROM 
                wash.car_vendor CV
                INNER JOIN wash.car_model CM ON CM.car_vendor_id = CV.car_vendor_id
              WHERE 
                CM.car_model_id = (SELECT car_model_id FROM wash.car WHERE car_id = TOL.car_id)
            ) as "Car",
            (SELECT car_number FROM wash.car WHERE car_id = TOL.car_id) AS "CarNumber",
            TOL.cash + TOL.non_cash + TOL.terminal AS "Summ",
            array_to_string(( 
              SELECT 
                array_agg(T.work) 
              FROM (
                SELECT CASE
                  WHEN 
                    category_key LIKE 't_truck8%'
                  THEN
                    work_number || '. ' || title || ' (' || (SELECT title FROM wash.category WHERE category_key = Works.category_key) || ')'
                  ELSE
                    title
                  END 
                AS work
                FROM(
                  SELECT 
                    W.title, tire_truck_order_id, work_number, category_key
                  FROM
                    wash.work W
                    INNER JOIN wash.price P ON P.work_id = W.work_id
                    INNER JOIN wash.tire_truck_order_work OW ON OW.price_id = P.price_id
                    INNER JOIN wash.category C ON P.category_id = C.category_id
                  UNION ALL
                  SELECT
                    title, tire_truck_order_id, NULL, NULL
                  FROM
                    wash.tire_truck_order_other_work
                  UNION ALL
                  SELECT
                    W.title, tire_truck_order_id, NULL, NULL
                  FROM
                    wash.work W
                    INNER JOIN wash.price P ON P.work_id = W.work_id
                    INNER JOIN wash.tire_truck_order_product OP ON OP.price_id = P.price_id
                  ORDER BY
                    work_number
                ) Works
                WHERE
                  tire_truck_order_id = TOL.tire_truck_order_id
                ORDER BY
                  work
              ) T
              ), E'\r\n'
            ) as "Works",
            TOL.comments AS "Comments",
            (SELECT title FROM wash.admin A INNER JOIN wash.shift S ON S.admin_id = A.admin_id WHERE S.shift_id = TOL.shift_id) AS "WashAdmin",
            'tire_truck' AS "OrderType",
            TOL.deleted AS "Deleted",
            TOL.delete_date AS "DeleteDate"
          FROM
            wash.tire_truck_order_list TOL
          WHERE 
            (({IsArchive} AND TOL.order_date::date >= {StartDate}::date AND TOL.order_date::date <![CDATA[<=]]> {EndDate}::Date)
              OR (NOT {IsArchive} AND TOL.shift_id = {ShiftId}))
          ORDER BY
            "OrderDateTime"
          ) AS wash_order
          ORDER BY "RowNumber"
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderItemSelectSqlQuery">
      <Text>
		WITH _car AS (
		  SELECT
		    car.car_id AS car_id,
		    car_model.title AS car_model,
		    car_vendor.title AS car_vendor,
		    category.title AS category_title,
		    category.category_key AS category_key,
		    car.car_number AS car_number,
		    car.client_id AS client_id,
		    client.title AS client_title
		  FROM
		    wash.car
		    INNER JOIN wash.order_list USING(car_id)
		    LEFT JOIN wash.client USING(client_id)
		    INNER JOIN wash.car_model USING(car_model_id)
		    INNER JOIN wash.category USING(category_id)
		    INNER JOIN wash.car_vendor USING(car_vendor_id)
		  WHERE
		    order_id = {OrderId}
		)
		
		SELECT
		  order_list.order_number AS "OrderNumber",
		  order_list.order_date AS "OrderDate",
		  order_list.car_id AS "CarId",
		  _car.car_vendor AS "CarVendor",
		  _car.car_model AS "CarModel",
		  _car.category_title AS "Category",
		  CASE 
		    WHEN _car.category_key = 'truck' 
		    THEN 'truck' 
		    ELSE 'pass' 
		  END AS "CarType",
		  _car.car_number AS "CarNumber",
		  _car.client_id AS "ClientId",
		  _car.client_title AS "Client",
		  CASE 
		    WHEN order_list.is_person 
		    THEN 'phys' 
		    ELSE 'legal' 
		  END AS "ClientType",
		  order_list.discount_percent AS "DiscountPercent",
		  order_list.discount AS "Discount",
		  order_list.cash AS "Cash",
		  order_list.non_cash AS "NonCash",
		  order_list.terminal AS "Terminal",
		  order_list.terminal + order_list.cash + order_list.non_cash AS "Summ",
		  order_list.comments AS "Comments",
          order_list.shift_id AS "ShiftId"
		FROM
		  wash.order_list
		  LEFT JOIN _car USING(car_id)
		WHERE
		  order_list.order_id = {OrderId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireOrderItemSelectSqlQuery">
      <Text>
		WITH _car AS (
		  SELECT
		    car.car_id AS car_id,
		    car_model.title AS car_model,
		    car_vendor.title AS car_vendor,
		    category.title AS category_title,
		    category.category_key AS category_key,
		    car.car_number AS car_number,
		    car.client_id AS client_id,
		    client.title AS client_title
		  FROM
		    wash.car
		    INNER JOIN wash.tire_order_list USING(car_id)
		    LEFT JOIN wash.client USING(client_id)
		    INNER JOIN wash.car_model USING(car_model_id)
		    INNER JOIN wash.category USING(category_id)
		    INNER JOIN wash.car_vendor USING(car_vendor_id)
		  WHERE
		    tire_order_id = {OrderId}
		)
		
		SELECT
		  tire_order_list.order_number AS "OrderNumber",
		  tire_order_list.order_date AS "OrderDate",
		  tire_order_list.car_id AS "CarId",
		  _car.car_vendor AS "CarVendor",
		  _car.car_model AS "CarModel",
		  CASE 
		    WHEN _car.category_key = 'truck' 
		    THEN 'truck' 
		    ELSE 'pass' 
		  END AS "CarType",
		  _car.car_number AS "CarNumber",
		  _car.client_id AS "ClientId",
		  _car.client_title AS "Client",
		  CASE 
		    WHEN tire_order_list.is_person 
		    THEN 'phys' 
		    ELSE 'legal' 
		  END AS "ClientType",
		  tire_order_list.discount AS "Discount",
		  tire_order_list.cash AS "Cash",
		  tire_order_list.non_cash AS "NonCash",
		  tire_order_list.terminal AS "Terminal",
		  tire_order_list.terminal + tire_order_list.cash + tire_order_list.non_cash AS "Summ",
		  tire_order_list.comments AS "Comments",
          tire_order_list.shift_id AS "ShiftId"
		FROM
		  wash.tire_order_list
		  LEFT JOIN _car USING(car_id)
		WHERE
		  tire_order_id = {OrderId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireTruckOrderItemSelectSqlQuery">
      <Text>
		WITH _car AS (
		  SELECT
		    car.car_id AS car_id,
		    car_model.title AS car_model,
		    car_vendor.title AS car_vendor,
		    category.title AS category_title,
		    category.category_key AS category_key,
		    car.car_number AS car_number,
		    car.client_id AS client_id,
		    client.title AS client_title
		  FROM
		    wash.car
		    INNER JOIN wash.tire_truck_order_list USING(car_id)
		    LEFT JOIN wash.client USING(client_id)
		    INNER JOIN wash.car_model USING(car_model_id)
		    INNER JOIN wash.category USING(category_id)
		    INNER JOIN wash.car_vendor USING(car_vendor_id)
		  WHERE
		    tire_truck_order_id = {OrderId}
		)
		
		SELECT
		  tire_truck_order_list.order_number AS "OrderNumber",
		  tire_truck_order_list.order_date AS "OrderDate",
		  tire_truck_order_list.car_id AS "CarId",
		  _car.car_vendor AS "CarVendor",
		  _car.car_model AS "CarModel",
		  CASE 
		    WHEN _car.category_key = 'truck' 
		    THEN 'truck' 
		    ELSE 'pass' 
		  END AS "CarType",
		  _car.car_number AS "CarNumber",
		  _car.client_id AS "ClientId",
		  _car.client_title AS "Client",
		  CASE 
		    WHEN tire_truck_order_list.is_person 
		    THEN 'phys' 
		    ELSE 'legal' 
		  END AS "ClientType",
		  tire_truck_order_list.discount AS "Discount",
		  tire_truck_order_list.cash AS "Cash",
		  tire_truck_order_list.non_cash AS "NonCash",
		  tire_truck_order_list.terminal AS "Terminal",
		  tire_truck_order_list.terminal + tire_truck_order_list.cash + tire_truck_order_list.non_cash AS "Summ",
		  tire_truck_order_list.comments AS "Comments",
          tire_truck_order_list.shift_id AS "ShiftId"
		FROM
		  wash.tire_truck_order_list
		  LEFT JOIN _car USING(car_id)
		WHERE
		  tire_truck_order_id = {OrderId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderDataCheckSelectSqlQuery">
      <Text>
        SELECT
        CASE WHEN (SELECT car_model_id FROM wash.car_model WHERE car_model_id = {CarModelId}) ISNULL AND {CarModelId} IS NOT NULL THEN True ELSE False END AS "CarModelDoesnotExist",
        CASE WHEN (SELECT client_id FROM wash.client WHERE client_id = {ClientId}) ISNULL AND {ClientId} IS NOT NULL THEN True ELSE False END AS "ClientDoesnotExist"
      </Text>
    </SqlQuery>

    <!-- - - - - - - - - EDIT ORDERS - - - - - - - - -->
    <SqlQuery Name="OrderInsertSelectSqlQuery">
      <Text>
        INSERT INTO
          wash.order_list (order_date, order_number, shift_id)
        SELECT
          now()::timestamp,
          (
            SELECT 
              COALESCE(MAX(order_number), 0) + 1 
            FROM 
              wash.order_list 
            WHERE 
              shift_id = {ShiftId}
          ),
          {ShiftId}
        RETURNING
          order_id AS "OrderId",
          order_number AS "OrderNumber",
          order_date AS "OrderDate";
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireOrderInsertSelectSqlQuery">
      <Text>     
        INSERT INTO
          wash.tire_order_list (order_date, order_number, shift_id)
        SELECT
          now()::timestamp,
          (
            SELECT 
              COALESCE(MAX(order_number), 0) + 1 
            FROM 
              wash.tire_order_list 
            WHERE 
              shift_id = {ShiftId}
          ),
            {ShiftId}
        RETURNING 
          tire_order_id AS "OrderId",
          order_number AS "OrderNumber",
          order_date AS "OrderDate";
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireTruckOrderInsertSelectSqlQuery">
      <Text>     
        INSERT INTO
          wash.tire_truck_order_list (order_date, order_number, shift_id)
        SELECT
          now()::timestamp,
          (
            SELECT 
              COALESCE(MAX(order_number), 0) + 1 
            FROM 
              wash.tire_truck_order_list 
            WHERE 
              shift_id = {ShiftId}
          ),
            {ShiftId}
        RETURNING 
          tire_truck_order_id AS "OrderId",
          order_number AS "OrderNumber",
          order_date AS "OrderDate";
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderFakeDeleteSqlQuery">
      <Text>
        SELECT 
          wash.cancel_discount({OrderId})
        WHERE
          {OrderType} = 'wash';
        
        UPDATE
          wash.order_list
        SET
          deleted = True,
          comments = {Comments},
          delete_date = {DeleteDate}
        WHERE
          order_id = {OrderId}
          AND {OrderType} = 'wash';
          
        UPDATE
          wash.tire_order_list
        SET
          deleted = True,
          comments = {Comments},
          delete_date = {DeleteDate}
        WHERE
          tire_order_id = {OrderId}
          AND {OrderType} = 'tire';
          
        UPDATE
          wash.tire_truck_order_list
        SET
          deleted = True,
          comments = {Comments},
          delete_date = {DeleteDate}
        WHERE
          tire_truck_order_id = {OrderId}
          AND {OrderType} = 'tire_truck';
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderDeleteSqlQuery">
      <Text>
        DELETE FROM
          wash.order_list
        WHERE
          order_id = {OrderId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireOrderDeleteSqlQuery">
      <Text>
        DELETE FROM
          wash.tire_order_list
        WHERE
          tire_order_id = {OrderId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireTruckOrderDeleteSqlQuery">
      <Text>
        DELETE FROM
          wash.tire_truck_order_list
        WHERE
          tire_truck_order_id = {OrderId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderSaveSqlQuery">
      <Text>
        INSERT INTO
          wash.car_model(title, car_vendor_id, category_id, is_approved)
        SELECT
          NULL, {CarVendorId}, (SELECT category_id FROM wash.category WHERE category_key = 'truck'), True
        WHERE
          {CarModelId} ISNULL
          AND NOT EXISTS (SELECT car_model_id FROM wash.car_model WHERE title ISNULL AND car_vendor_id = {CarVendorId} AND category_id = (SELECT category_id FROM wash.category WHERE category_key = 'truck'));
        
        INSERT INTO
          wash.client(title, is_person, discount, visit_quantity, is_auto_generated)
        SELECT
        COALESCE({ClientTitle}, (SELECT title FROM wash.car_vendor WHERE car_vendor_id = {CarVendorId}) || '_' || COALESCE((SELECT title FROM wash.car_model WHERE car_model_id = {CarModelId}), '') || '_' || regexp_replace(UPPER(COALESCE({CarNumber}::character varying, '')), ' +', '', 'g')), 
          {IsPerson},
          0,
          0,
          CASE WHEN {ClientTitle} ISNULL THEN True ELSE False END
        WHERE
          {ClientId} ISNULL;
        
        UPDATE
          wash.order_list
        SET
          car_id = COALESCE(
            {CarId},
            wash.insert_car(
              COALESCE({CarModelId}, (SELECT car_model_id FROM wash.car_model WHERE title ISNULL AND car_vendor_id = {CarVendorId} AND category_id = (SELECT category_id FROM wash.category WHERE category_key = 'truck'))), 
              regexp_replace(UPPER({CarNumber}::character varying), ' +', '', 'g'),
              COALESCE({ClientId}, CURRVAL('wash.client_id_seq'::regclass))
            )
          ),
          is_person = {IsPerson},
          discount_percent = COALESCE({DiscountPercent}, 0),
          discount = COALESCE({Discount}, 0),
          cash = COALESCE({Cash}::integer, 0),
          non_cash = COALESCE({NonCash}::integer, 0),
          terminal = COALESCE({Terminal}::integer, 0),
          comments = {Comments},
          deleted = False
        WHERE
          order_id = {OrderId};
          
        SELECT wash.count_discount({OrderId});
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireOrderSaveSqlQuery">
      <Text>
        INSERT INTO
          wash.car_model(title, car_vendor_id, category_id, is_approved)
        SELECT
          NULL, {CarVendorId}, (SELECT category_id FROM wash.category WHERE category_key = 'truck'), True
        WHERE
          {CarModelId} ISNULL
          AND NOT EXISTS (SELECT car_model_id FROM wash.car_model WHERE title ISNULL AND car_vendor_id = {CarVendorId} AND category_id = (SELECT category_id FROM wash.category WHERE category_key = 'truck'));
        
        UPDATE
          wash.tire_order_list
        SET
          car_id = CASE
            WHEN {CarId} ISNULL OR ({ClientId} IS NOT NULL AND (SELECT COALESCE(client_id, -1) FROM wash.car WHERE car_id = {CarId}) != {ClientId})
            THEN wash.insert_car(
              COALESCE({CarModelId}, (SELECT car_model_id FROM wash.car_model WHERE title ISNULL AND car_vendor_id = {CarVendorId} AND category_id = (SELECT category_id FROM wash.category WHERE category_key = 'truck'))),
              regexp_replace(UPPER({CarNumber}::character varying), ' +', '', 'g'),
              {ClientId}
            )
            ELSE {CarId}
          END,
          is_person = {IsPerson},
          cash = COALESCE({Cash}::integer, 0),
          non_cash = COALESCE({NonCash}::integer, 0),
          terminal = COALESCE({Terminal}::integer, 0),
          comments = {Comments},
          deleted = False
        WHERE
          tire_order_id = {OrderId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireTruckOrderSaveSqlQuery">
      <Text>
        INSERT INTO
          wash.car_model(title, car_vendor_id, category_id, is_approved)
        SELECT
          NULL, {CarVendorId}, (SELECT category_id FROM wash.category WHERE category_key = 'truck'), True
        WHERE
          {CarModelId} ISNULL
          AND NOT EXISTS (SELECT car_model_id FROM wash.car_model WHERE title ISNULL AND car_vendor_id = {CarVendorId} AND category_id = (SELECT category_id FROM wash.category WHERE category_key = 'truck'));
        
        UPDATE
          wash.tire_truck_order_list
        SET
          car_id = CASE
            WHEN {CarId} ISNULL OR ({ClientId} IS NOT NULL AND (SELECT COALESCE(client_id, -1) FROM wash.car WHERE car_id = {CarId}) != {ClientId})
            THEN wash.insert_car(
              COALESCE({CarModelId}, (SELECT car_model_id FROM wash.car_model WHERE title ISNULL AND car_vendor_id = {CarVendorId} AND category_id = (SELECT category_id FROM wash.category WHERE category_key = 'truck'))),
              regexp_replace(UPPER({CarNumber}::character varying), ' +', '', 'g'),
              {ClientId}
            )
            ELSE {CarId}
          END,
          is_person = {IsPerson},
          cash = COALESCE({Cash}::integer, 0),
          non_cash = COALESCE({NonCash}::integer, 0),
          terminal = COALESCE({Terminal}::integer, 0),
          comments = {Comments},
          deleted = False
        WHERE
          tire_truck_order_id = {OrderId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderEditSaveSqlQuery">
      <Text>
        INSERT INTO
          wash.car(car_model_id, car_number, client_id)
        SELECT
          car_model_id,
          car_number,
          {ClientId}
        FROM
          wash.car
        WHERE
          car_id = {CarId}
          AND (SELECT client_id FROM wash.car WHERE car_id = {CarId}) != {ClientId}
          AND NOT EXISTS(
            SELECT
              C.car_id
            FROM
              wash.car C, 
              wash.car C1
            WHERE
              NOT C.deleted
              AND C1.car_id = {CarId}
              AND C.car_id != C1.car_id
              AND C1.car_model_id = C.car_model_id
              AND(
                C1.car_number = C.car_number
                OR (C1.car_number ISNULL AND C.car_number ISNULL)
              )
              AND C.client_id = {ClientId}
            );
        
        UPDATE
          wash.order_list
        SET
          car_id = 
            CASE 
              WHEN 
                (SELECT client_id FROM wash.car WHERE car_id = {CarId}) = {ClientId} OR {ClientId} ISNULL 
              THEN   
                {CarId} 
              ELSE 
                (SELECT
                  C.car_id
                FROM
                  wash.car C, 
                  wash.car C1
                WHERE
                  NOT C.deleted
                  AND C1.car_id = {CarId}
                  AND C.car_id != C1.car_id
                  AND C1.car_model_id = C.car_model_id
                  AND(
                    C1.car_number = C.car_number
                    OR (C1.car_number ISNULL AND C.car_number ISNULL)
                  )
                  AND C.client_id = {ClientId}
                LIMIT 1
              )
              END,
          cash = COALESCE({Cash}::integer, 0),
          non_cash = COALESCE({NonCash}::integer, 0),
          terminal = COALESCE({Terminal}::integer, 0),
          comments = {Comments}
        WHERE
          order_id = {OrderId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireOrderEditSaveSqlQuery">
      <Text>
        INSERT INTO
          wash.car(car_model_id, car_number, client_id)
        SELECT
          car_model_id,
          car_number,
          {ClientId}
        FROM
          wash.car
        WHERE
          car_id = {CarId}
          AND (SELECT client_id FROM wash.car WHERE car_id = {CarId}) != {ClientId}
          AND NOT EXISTS(
            SELECT
              C.car_id
            FROM
              wash.car C, 
              wash.car C1
            WHERE
              C1.car_id = {CarId}
              AND C.car_id != C1.car_id
              AND C1.car_model_id = C.car_model_id
              AND(
                C1.car_number = C.car_number
                OR (C1.car_number ISNULL AND C.car_number ISNULL)
              )
              AND C.client_id = {ClientId}
            );
        
        UPDATE
          wash.tire_order_list
        SET
          car_id = 
            CASE 
              WHEN 
                (SELECT client_id FROM wash.car WHERE car_id = {CarId}) = {ClientId} OR {ClientId} ISNULL 
              THEN 
                {CarId} 
              ELSE 
                (SELECT
                  C.car_id
                FROM
                  wash.car C,
                  wash.car C1
                WHERE
                  NOT C.deleted
                  AND C1.car_id = {CarId}
                  AND C.car_id != C1.car_id
                  AND C1.car_model_id = C.car_model_id
                  AND(
                    C1.car_number = C.car_number
                    OR (C1.car_number ISNULL AND C.car_number ISNULL)
                  )
                  AND C.client_id = {ClientId}
                LIMIT 1
              ) 
              END,
          cash = COALESCE({Cash}::integer, 0),
          non_cash = COALESCE({NonCash}::integer, 0),
          terminal = COALESCE({Terminal}::integer, 0),
          comments = {Comments}
        WHERE
          tire_order_id = {OrderId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireTruckOrderEditSaveSqlQuery">
      <Text>
        INSERT INTO
          wash.car(car_model_id, car_number, client_id)
        SELECT
          car_model_id,
          car_number,
          {ClientId}
        FROM
          wash.car
        WHERE
          car_id = {CarId}
          AND (SELECT client_id FROM wash.car WHERE car_id = {CarId}) != {ClientId}
          AND NOT EXISTS(
            SELECT
              C.car_id
            FROM
              wash.car C, 
              wash.car C1
            WHERE
              C1.car_id = {CarId}
              AND C.car_id != C1.car_id
              AND C1.car_model_id = C.car_model_id
              AND(
                C1.car_number = C.car_number
                OR (C1.car_number ISNULL AND C.car_number ISNULL)
              )
              AND C.client_id = {ClientId}
            );
        
        UPDATE
          wash.tire_truck_order_list
        SET
          car_id = 
            CASE 
              WHEN 
                (SELECT client_id FROM wash.car WHERE car_id = {CarId}) = {ClientId} OR {ClientId} ISNULL 
              THEN 
                {CarId} 
              ELSE 
                (SELECT
                  C.car_id
                FROM
                  wash.car C,
                  wash.car C1
                WHERE
                  NOT C.deleted
                  AND C1.car_id = {CarId}
                  AND C.car_id != C1.car_id
                  AND C1.car_model_id = C.car_model_id
                  AND(
                    C1.car_number = C.car_number
                    OR (C1.car_number ISNULL AND C.car_number ISNULL)
                  )
                  AND C.client_id = {ClientId}
                LIMIT 1
              ) 
              END,
          cash = COALESCE({Cash}::integer, 0),
          non_cash = COALESCE({NonCash}::integer, 0),
          terminal = COALESCE({Terminal}::integer, 0),
          comments = {Comments}
        WHERE
          tire_truck_order_id = {OrderId};
      </Text>
    </SqlQuery>


    <!-- - - - - - - - - VIEW CARS - - - - - - - - -->
    <SqlQuery Name="CarVendorSelectSqlQuery">
      <Text>
        WITH 
          tmp 
        AS
          (SELECT DISTINCT
            CV.car_vendor_id AS CarVendorId,
            CV.title AS Title,
            CASE
              WHEN CM.category_id = (SELECT category_id FROM wash.category WHERE category_key = 'truck') THEN 'truck'
              ELSE 'pass'
            END AS CarType
          FROM
            wash.car_vendor CV
            LEFT JOIN wash.car_model CM ON CM.car_vendor_id = CV.car_vendor_id
          )
        SELECT DISTINCT
          CarVendorId AS "CarVendorId",
          Title AS "Title",
          CASE 
            WHEN (SELECT Count(*) FROM tmp WHERE Title = T.Title) = 2 THEN 'both'
            ELSE CarType 
          END AS "CarType"
        FROM tmp T
        ORDER BY "Title"
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarModelSelectSqlQuery">
      <Text>
        SELECT
          CM.car_model_id AS "CarModelId",
          CM.title AS "Title",
          CM.car_vendor_id AS "CarVendorId",
          CM.category_id AS "CategoryId",
          CASE WHEN CM.category_id = (SELECT category_id FROM wash.category WHERE category_key = 'truck') THEN 'truck' ELSE 'pass' END AS "CarType"
        FROM
          wash.car_model CM
      </Text>
    </SqlQuery>

    <SqlQuery Name="CategorySelectSqlQuery">
      <Text>
        SELECT
          category_id AS "CategoryId",
          title AS "Title"
        FROM
          wash.category
        WHERE
          category_key LIKE 'pass%'
      </Text>
    </SqlQuery>

    <SqlQuery Name="CategoryWithTruckSelectSqlQuery">
      <Text>
        SELECT
          category_id AS "CategoryId",
          title AS "Title"
        FROM
          wash.category
        WHERE
          category_key LIKE 'pass%' 
          OR category_key LIKE 'truck'
        ORDER BY
          title
      </Text>
    </SqlQuery>

    <SqlQuery Name="CategoryTireSelectSqlQuery">
      <Text>
        SELECT
          category_id AS "CategoryId",
          title AS "Title"
        FROM
          wash.category
        WHERE
          category_key LIKE 'tire%'
          AND visible
        ORDER BY
          title
      </Text>
    </SqlQuery>

    <SqlQuery Name="CategoryTireTruckSelectSqlQuery">
      <Text>
        SELECT
          category_id AS "CategoryId",
          title AS "Title"
        FROM
          wash.category
        WHERE
          category_key LIKE 't_truck%'
          AND visible
        ORDER BY
          title
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarMainSelectSqlQuery">
      <Text>
        SELECT
          CM.car_model_id AS "CarModelId",
          CM.title AS "CarModel",
          CM.car_vendor_id AS "CarVendorId",
          CM.category_id AS "CategoryId",
          (SELECT title FROM wash.car_vendor WHERE car_vendor_id = CM.car_vendor_id) AS "CarVendor",
          (SELECT title FROM wash.category WHERE category_id = CM.category_id) AS "Category",
          NOT CM.is_approved AS "IsNotApproved"
        FROM
          wash.car_model CM
        ORDER BY
          "CarVendor",
          "CarModel",
          "Category"
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarSelectSqlQuery">
      <Text>
        SELECT
          C.car_id AS "CarId",
          C.car_model_id AS "CarModelId",
          CM.car_vendor_id AS "CarVendorId",
          C.car_number AS "CarNumber",
          C.client_id AS "ClientId"
        FROM
          wash.car C
          INNER JOIN wash.car_model CM ON C.car_model_id = CM.car_model_id
        WHERE
          C.deleted = False
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarModelItemSelectSqlQuery">
      <Text>
        SELECT
          CM.car_model_id AS "CarModelId",
          CM.title AS "CarModel",
          CM.car_vendor_id AS "CarVendorId",
          CM.category_id AS "CategoryId"
        FROM
          wash.car_model CM
        WHERE
          CM.car_model_id = {CarModelId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarItemSelectSqlQuery">
      <Text>
        SELECT
          CM.car_model_id AS "CarModelId",
          CM.car_vendor_id AS "CarVendorId",
          C.car_number AS "CarNumber"
        FROM
          wash.car C
          INNER JOIN wash.car_model CM ON CM.car_model_id = C.car_model_id
        WHERE
          C.car_id = {CarId}
          AND C.deleted = False
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarModelCheckSelectSqlQuery">
      <Text>
        SELECT 
          COUNT(*) AS "Count",
          MAX(CarModelId) AS "CarModelId"
        FROM(
          SELECT
            (SELECT title FROM wash.car_vendor WHERE car_vendor_id = CM.car_vendor_id) AS CarVendor,
            CM.title AS CarModel,
            CM.car_model_id AS CarModelId,
            CM.category_id AS CategoryId
          FROM
            wash.car_model CM
          WHERE
            CM.car_model_id != {CarModelId}
          ) T
        WHERE
          T.CarVendor = {CarVendor}
          AND (T.CarModel = regexp_replace(upper(trim({Title}::character varying)), ' +', ' ', 'g')
          OR (T.CarModel ISNULL  
            AND (regexp_replace(upper(trim({Title}::character varying)), ' +', ' ', 'g') ISNULL) 
            OR regexp_replace(upper(trim({Title}::character varying)), ' +', ' ', 'g') = '')
            )
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientCarSelectSqlQuery">
      <Text>
        SELECT
          C.car_id AS "CarId",
          CM.title AS "Model",
          CV.title AS "Vendor",
          C.car_number AS "CarNumber"
        FROM
          wash.car C
          INNER JOIN wash.car_model CM ON CM.car_model_id = C.car_model_id
          INNER JOIN wash.car_vendor CV ON CV.car_vendor_id = CM.car_vendor_id
        WHERE 
          C.client_id = {ClientId}
          AND C.deleted = False
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarVendorCheckSelectSqlQuery">
      <Text>
        SELECT
          COUNT(*) AS "Count"
        FROM
          wash.car_model
        WHERE
          car_vendor_id = {CarVendorId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="NewCarCheckSelectSqlQuery">
      <Text>
        SELECT
          COUNT(*) AS "Count"
        FROM
          wash.car_model
        WHERE
          NOT is_approved
          AND NOT {IsWashAdmin}
      </Text>
    </SqlQuery>

    <!-- - - - - - - - - EDIT CARS - - - - - - - - -->
    <SqlQuery Name="CarVendorAndModelInsertSqlQuery">
      <Text>
        INSERT INTO
          wash.car_model(title, car_vendor_id, category_id)
        VALUES
          (regexp_replace(upper(trim({CarModel}::character varying)), ' +', ' ', 'g'), {CarVendorId}, {CategoryId})
        RETURNING 
          car_model_id;
        
        INSERT INTO
          wash.car_vendor(title)
        SELECT
          regexp_replace(upper(trim({CarVendor}::character varying)), ' +', ' ', 'g')
        WHERE 
          {CarVendorId} ISNULL;
        
        UPDATE 
          wash.car_model
        SET 
          car_vendor_id = CURRVAL('wash.car_vendor_id_seq'::regclass)
        WHERE
          car_model_id = CURRVAL('wash.car_model_id_seq'::regclass)
          AND {CarVendorId} ISNULL;
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarModelInsertSqlQuery">
      <Text>
        INSERT INTO
          wash.car_model(title, car_vendor_id, category_id, is_approved)
        VALUES
          (CASE WHEN trim({Title}::character varying) = '' THEN NULL ELSE regexp_replace(upper(trim({Title}::character varying)), ' +', ' ', 'g') END, {CarVendorId}, {CategoryId}, {IsApproved})
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarModelUpdateSqlQuery">
      <Text>
        UPDATE
          wash.car_model
        SET
          title = regexp_replace(upper(trim({Title}::character varying)), ' +', ' ', 'g'),
          car_vendor_id = {CarVendorId},
          category_id = {CategoryId}
        WHERE
          car_model_id = {CarModelId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarModelDeleteSqlQuery">
      <Text>
        DELETE FROM
          wash.car_model
        WHERE
          car_model_id = {CarModelId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarModelApproveUpdateSqlQuery">
      <Text>
        UPDATE
          wash.car_model
        SET
          is_approved = True
        WHERE
          car_model_id = {CarModelId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarInsertSqlQuery">
      <Text>
        SELECT wash.insert_car({CarModelId}, regexp_replace(UPPER({CarNumber}::character varying), ' +', '', 'g'), {ClientId});
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarUpdateSqlQuery">
      <Text>
        UPDATE
          wash.car
        SET
          car_model_id = {CarModelId}, 
          car_number = regexp_replace(UPPER({CarNumber}::character varying), ' +', '', 'g')
        WHERE
          car_id = {CarId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarFakeDeleteSqlQuery">
      <Text>
        UPDATE
        wash.car
        SET
        deleted = True
        WHERE
        car_id = {CarId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarVendorInsertSqlQuery">
      <Text>
        INSERT INTO
          wash.car_vendor(title)
        SELECT
          regexp_replace(upper(trim({Title}::character varying)), ' +', ' ', 'g')
        WHERE
          (SELECT COUNT(*) FROM wash.car_vendor WHERE title = regexp_replace(upper(trim({Title}::character varying)), ' +', ' ', 'g')) = 0
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarVendorUpdateSqlQuery">
      <Text>
        UPDATE
          wash.car_vendor
        SET
          title = regexp_replace(upper(trim({Title}::character varying)), ' +', ' ', 'g')
        WHERE
          car_vendor_id = {CarVendorId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarVendorDeleteSqlQuery">
      <Text>
        DELETE FROM
          wash.car_vendor
        WHERE
          car_vendor_id = {CarVendorId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="CarModelMergeSqlQuery">
      <Text>
        UPDATE 
          wash.car
        SET
          car_model_id = {ExistingCarModelId}
        WHERE
          car_model_id = {CarModelId};
        
        DELETE FROM 
          wash.car_model
        WHERE
          car_model_id = {CarModelId};
      </Text>
    </SqlQuery>

    <!-- - - - - - - - - EDIT Email - - - - - - - - -->  <!-- [не используется][mfedosov] -->

    <SqlQuery Name="ClientEmailSelectSqlQuery"> <!-- [не используется][mfedosov] -->
      <Text>
              SELECT
              email_id AS "EmailId",
              email AS "Email"
              FROM
              wash.email
              WHERE
              client_id={ClientId};
          </Text>
    </SqlQuery>

    <SqlQuery Name="EmailInsertSqlQuery">  <!-- [не используется][mfedosov] -->
      <Text>
              INSERT INTO 
                wash.email
                (email,client_id)
              SELECT {Email}, {ClientId}
              WHERE {Email} IS NOT NULL;
          </Text>
    </SqlQuery>

    <SqlQuery Name="EmailUpdateSqlQuery">  <!-- [не используется][mfedosov] -->
      <Text>
              UPDATE
              wash.email
              SET
              email = {Email}
              WHERE
              email_id = {EmailId}
          </Text>
    </SqlQuery>

    <SqlQuery Name="EmailDeleteSqlQuery">  <!-- [не используется][mfedosov] -->
      <Text>
              DELETE
              FROM
              wash.email
              WHERE
              email_id={EmailId}
          </Text>
    </SqlQuery>




    <!-- - - - - - - - - VIEW CLIENTS - - - - - - - - -->
    <SqlQuery Name="ClientWithCarsSelectSqlQuery">
      <Text>
        SELECT
          C.client_id AS "ClientId",
          (SELECT COALESCE(discount, 0) FROM wash.client WHERE client_id = C.client_id) AS "Discount",
          (SELECT is_person FROM wash.client WHERE client_id = C.client_id) AS "IsPerson",
          CASE 
            WHEN(SELECT is_person FROM wash.client WHERE client_id = C.client_id) 
              THEN 'phys'
            ELSE 'legal' END AS "ClientType",
          C.car_id AS "CarId",
          (SELECT car_vendor_id FROM wash.car_model WHERE car_model_id = C.car_model_id) AS "CarVendorId",
          C.car_model_id AS "CarModelId",
          C.car_number AS "CarNumber",
          (SELECT is_auto_generated FROM wash.client WHERE client_id = C.client_id) AS "IsAutoGenerated"
        FROM
          wash.car C
        WHERE
          C.deleted = False
          AND C.client_id IS NOT NULL;
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientSelectSqlQuery">
      <Text>
        SELECT
          client_id AS "ClientId",
          title AS "Title",
          is_person AS "IsPerson",
          CASE WHEN is_person THEN discount ELSE 0 END AS "Discount",
          CASE WHEN is_person THEN 0 ELSE discount END AS "LegalDiscount",
          inn AS "INN",
          prefix AS "Prefix",
          COALESCE(contract_number || ' от ' || to_char(contract_date,'dd.MM.yyyy'),'б/н') AS "ContractNumber",
          contract_date AS "ContractDate",
          is_auto_generated
        FROM
          wash.client
        ORDER BY
          is_auto_generated,
          title
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientAddressesSelectSqlQuery">
      <Text>
        SELECT
          email AS "Address"
        FROM 
          wash.email
        WHERE
          email.client_id={ClientId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientMainSelectSqlQuery">
      <Text>
        WITH 
          car
        AS(
          SELECT
            C.client_id AS client_id,
            COALESCE(CM.title, '') AS model,
            CV.title AS vendor,
            C.car_number AS car_number
          FROM
            wash.car C
            INNER JOIN wash.car_model CM ON CM.car_model_id = C.car_model_id
            INNER JOIN wash.car_vendor CV ON CV.car_vendor_id = CM.car_vendor_id
          WHERE
            C.deleted = False
        )
        SELECT
          Cl.client_id AS "ClientId",
          Cl.title AS "Title",
          CASE WHEN Cl.discount > 0 THEN Cl.discount || '%' ELSE ' ' END AS "Discount",
          CASE WHEN Cl.visit_quantity > 0 THEN Cl.visit_quantity ELSE null END AS "VisitQuantity",
          CASE WHEN Cl.is_accumulative THEN 'Накопительная' ELSE 'Фиксированная' END AS "DiscountType",
          CASE WHEN Cl.is_person THEN 'Физ. лицо' ELSE 'Юр. лицо' END AS "ClientType",
          array_to_string(( 
          SELECT 
            array_agg(vendor || ' ' || COALESCE(model, '') || COALESCE(' (' || car_number || ')', ''))
          FROM
            car
          WHERE
            client_id = Cl.client_id
            ), E'\r\n'
          ) AS "Cars",
          Cl.is_auto_generated
        FROM
          wash.client Cl
        WHERE
          Cl.client_id IN
          (
            SELECT
              client.client_id
            FROM
              wash.client
            WHERE
              (client.title ILIKE '%'|| replace(COALESCE({SearchTitle}, ''), '*', '%') || '%') AND
              (
              (({ClientType} = 'Юр. лицо') AND (client.is_person = False)) OR
              (({ClientType} = 'Физ. лицо') AND (client.is_person = True)) OR
              ({ClientType} IS NULL)
              )
            ORDER BY
              client.is_auto_generated,
              client.title
            LIMIT 100
            OFFSET ({OffsetPage} - 1) * 100
          )
        ORDER BY
          Cl.is_auto_generated,
          Cl.title
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientPageCountSelectSqlQuery">
      <Text>
        SELECT
          CASE WHEN COUNT(*) % 100 = 0 THEN COUNT(*) / 100 ELSE (COUNT(*) / 100) + 1 END AS "Count"
        FROM
          wash.client Cl
        WHERE
          (Cl.title ILIKE '%'|| replace(COALESCE({SearchTitle}, ''), '*', '%') || '%') AND
          (
          (({ClientType} = 'Юр. лицо') AND (Cl.is_person = False)) OR
          (({ClientType} = 'Физ. лицо') AND (Cl.is_person = True)) OR
          ({ClientType} IS NULL)
          )
      </Text>
    </SqlQuery>

    <SqlQuery Name="IsClientAllowDeleteSelectSqlQuery">
      <Text>
        SELECT 
          COUNT(*) = 0 AS "Allow" 
        FROM(
          SELECT 
            order_id 
          FROM 
            wash.car C 
            INNER JOIN wash.order_list OL ON C.car_id = OL.car_id 
          WHERE 
            C.client_id = {ClientId} 
            AND NOT OL.deleted
          UNION ALL 
          SELECT 
            tire_order_id 
          FROM 
            wash.car C 
            INNER JOIN wash.tire_order_list TOL ON C.car_id = TOL.car_id 
          WHERE 
            C.client_id = {ClientId} 
            AND NOT TOL.deleted
          UNION ALL 
          SELECT 
            tire_truck_order_id 
          FROM 
            wash.car C 
            INNER JOIN wash.tire_truck_order_list TOL ON C.car_id = TOL.car_id 
          WHERE 
            C.client_id = {ClientId} 
            AND NOT TOL.deleted
        ) x
      </Text>
    </SqlQuery>

    <SqlQuery Name="LegalClientSelectSqlQuery">
      <Text>
        SELECT
          Cl.client_id AS "ClientId",
          Cl.title AS "Title"
        FROM
          wash.client Cl
        WHERE
          NOT Cl.is_person
          AND Cl.title ILIKE '%'|| replace(COALESCE({SearchTitle}, ''), '*', '%') || '%'
        ORDER BY
          Cl.title
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientItemSelectSqlQuery">
      <Text>
        SELECT
          Cl.title AS "Title",
          Cl.is_person AS "IsPerson",
          Cl.discount AS "Discount",
          Cl.card AS "Card",
          Cl.visit_quantity AS "VisitQuantity",
          Cl.is_accumulative AS "IsAccumulative",
          Cl.contract_date AS "ContractDate",
          Cl.contract_number AS "ContractNumber",
          Cl.contact AS "Contact",
          Cl.phone AS "Phone",
          Cl.account AS "Account",
          Cl.additional AS "Additional",
          Cl.inn AS "INN",
          Cl.prefix AS "Prefix"
        FROM
          wash.client Cl
        WHERE
          client_id = {ClientId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientCheckSelectSqlQuery">
      <Text>
        SELECT 
          COUNT(*) AS "Count"
        FROM
          wash.car C
        WHERE 
          C.car_model_id = {CarModelId}
      </Text>
    </SqlQuery>

    <!-- - - - - - - - - EDIT CLIENTS - - - - - - - - -->
    <SqlQuery Name="ClientInsertSelectSqlQuery">
      <Text>
        INSERT INTO
          wash.client(title, is_person, discount, is_accumulative, visit_quantity)
        SELECT
          ' ', True, 0, True, 0
        WHERE
          {IsNewRecord}
        RETURNING 
          client_id AS "ClientId";
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientInsertSqlQuery">
      <Text>
        INSERT INTO
        wash.client(title, is_person, discount, is_accumulative, visit_quantity)
        VALUES
          ({Title}, {IsPerson}, COALESCE({Discount}, 0), {IsAccumulative}, {VisitQuantity})
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientUpdateSqlQuery">
      <Text>
        UPDATE 
          wash.client
        SET
          title = {Title},
          is_person = {IsPerson},
          discount = COALESCE({Discount}, 0),
          card = {Card},
          is_accumulative = {IsAccumulative},
          visit_quantity = COALESCE({VisitQuantity}::integer, 0),
          contract_date = {ContractDate},
          contract_number = {ContractNumber},
          contact = {Contact},
          phone = {Phone},
          account = {Account},
          additional = {Additional},
          inn = {INN},
          prefix = {Prefix}          
        WHERE
          client_id = {ClientId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientDeleteSqlQuery">
      <Text>
        UPDATE
          wash.car
        SET
          deleted = True
        WHERE
          client_id = {ClientId};
        
        DELETE FROM
          wash.client
        WHERE
          client_id = {ClientId};
      </Text>
    </SqlQuery>


    <!-- - - - - - - - - VIEW WORKS - - - - - - - - -->
    <SqlQuery Name="WorkSelectSqlQuery">
      <Text>
        SELECT
          P.work_id AS "WorkId",
          part_number || '.' || work_number || '. ' || W.title
          AS "Title",
          P.price AS "Price",
          P.price_id AS "PriceId",
          (SELECT
            CASE 
              WHEN (
                SELECT 
                  order_id 
                FROM 
                  wash.order_work 
                WHERE 
                  order_id = {OrderId}
                  AND price_id = P.price_id
                ) ISNULL 
              THEN FALSE
              ELSE TRUE 
            END
          ) AS "IsChecked",
          part_number AS "Sort1",
          true AS "Sort2",
          work_number AS "Sort3"
        FROM
          wash.price P
          INNER JOIN wash.work W ON P.work_id = W.work_id
          INNER JOIN wash.part ON part.part_id = W.part_id
        WHERE
          NOT W.deleted
          AND P.price > 0
          AND P.category_id = {CategoryId}
          AND ((({ClientId} ISNULL OR (SELECT COUNT(*) FROM wash.work INNER JOIN wash.part ON work.part_id = part.part_id WHERE work.client_id = {ClientId} AND NOT work.deleted AND price_type = 'pass') = 0) AND client_id ISNULL)
          OR ({ClientId} IS NOT NULL AND client_id = {ClientId}))
          
        UNION ALL
        
        SELECT
          NULL AS "WorkId",
          '    ' || part_number || '. ' || title AS "Title",
          NULL AS "Price",
          NULL AS "PriceId",
          False AS "IsChecked",
          part_number AS "Sort1",
          false AS "Sort2",
          part_number AS "Sort3"
        FROM
          wash.part P
        WHERE
          price_type = 'pass'
          AND (SELECT COUNT(*) FROM wash.price INNER JOIN wash.work ON work.work_id = price.work_id WHERE work.client_id = {ClientId} AND NOT deleted AND work.part_id = P.part_id) > 0
        
        ORDER BY
          "Sort1",
          "Sort2",
          "Sort3"
          
      </Text>
    </SqlQuery>

    <SqlQuery Name="WorkTruckSelectSqlQuery">
      <Text>
        WITH 
          P1 
        AS(
          SELECT *
          FROM 
            wash.price P1
          WHERE
            category_id = 7
        ),
          P2 
        AS(
          SELECT *
          FROM 
            wash.price P2
          WHERE
            category_id = 8
          )
        SELECT
          P1.work_id AS "WorkId",
          part_number || '.' || W.work_number || '. ' || W.title AS "Title",
          P1.price AS "Price",
          P2.price AS "PriceSpec",
          P1.price_id AS "PriceId",
          P2.price_id AS "PriceIdSpec",
          (SELECT
            CASE
              WHEN (
                SELECT
                  order_id
                FROM
                  wash.order_work
                WHERE
                  order_id = {OrderId}
                  AND (
                    price_id = P1.price_id
                    OR price_id = P2.price_id)
                ) ISNULL 
              THEN False
              ELSE True
            END
          ) AS "IsChecked",
          (SELECT
            CASE 
              WHEN (
                SELECT 
                  order_id 
                FROM 
                  wash.order_work 
                WHERE 
                  order_id = {OrderId}
                  AND price_id = P1.price_id
                ) IS NOT NULL
              THEN False::character varying
              ELSE True::character varying
            END
          ) AS "IsCheckedSpec",
          part_number AS "Sort1",
          true AS "Sort2",
          work_number AS "Sort3"
        FROM
          wash.work W
          INNER JOIN wash.part ON W.part_id = part.part_id
          INNER JOIN P1 ON P1.work_id = W.work_id
          INNER JOIN P2 ON P2.work_id = W.work_id
        WHERE
          NOT W.deleted
          AND (
          (({ClientId} ISNULL OR (SELECT COUNT(*) FROM wash.work INNER JOIN wash.part ON work.part_id = part.part_id WHERE work.client_id = {ClientId} AND NOT work.deleted AND price_type = 'truck') = 0) AND client_id ISNULL)
            OR ({ClientId} IS NOT NULL AND client_id = {ClientId}))
        
        UNION ALL
        SELECT
          NULL AS "WorkId",
          '    ' || part_number || '. ' || title AS "Title",
          NULL AS "Price",
          NULL AS "PriceSpec",
          NULL AS "PriceId",
          NULL AS "PriceIdSpec",
          False AS "IsChecked",
          False::character varying AS "IsCheckedSpec",
          part_number AS "Sort1",
          false AS "Sort2",
          part_number AS "Sort3"
        FROM
          wash.part P
        WHERE
          price_type = 'truck'
          AND (SELECT COUNT(*) FROM wash.price INNER JOIN wash.work ON work.work_id = price.work_id WHERE COALESCE(work.client_id, 0) = COALESCE({ClientId}, 0) AND NOT deleted AND work.part_id = P.part_id) > 0
        
        ORDER BY
          "Sort1",
          "Sort2",
          "Sort3"
      </Text>
    </SqlQuery>

    <SqlQuery Name="WorkTireSelectSqlQuery">
      <Text>
        SELECT
          P.work_id AS "WorkId",
          work_number || '. ' || W.title AS "Title",
          P.price AS "Price",
          P.price_id AS "PriceId",
          P.category_id AS "CategoryId",
          (SELECT
            CASE 
              WHEN (
                SELECT 
                  tire_order_id 
                FROM 
                  wash.tire_order_work 
                WHERE 
                  tire_order_id = {OrderId}
                  AND price_id = P.price_id
                ) ISNULL 
              THEN FALSE
              ELSE TRUE 
            END
          ) AS "IsChecked",
          work_number AS "Sort1"
        FROM
          wash.work W
          INNER JOIN wash.price P ON P.work_id = W.work_id
          INNER JOIN wash.category C ON C.category_id = P.category_id
        WHERE
          NOT W.deleted
          AND P.price > 0
          AND W.client_id ISNULL
          AND C.category_key LIKE 'tire%'
        ORDER BY
        "Sort1"        
      </Text>
    </SqlQuery>

    <SqlQuery Name="WorkTireTruckSelectSqlQuery">
      <Text>
        SELECT
          P.work_id AS "WorkId",
          work_number || '. ' || W.title AS "Title",
          P.price AS "Price",
          P.price_id AS "PriceId",
          P.category_id AS "CategoryId",
          (SELECT
            CASE 
              WHEN (
                SELECT 
                  tire_truck_order_id 
                FROM 
                  wash.tire_truck_order_work 
                WHERE 
                  tire_truck_order_id = {OrderId}
                  AND price_id = P.price_id
                ) ISNULL 
              THEN FALSE
              ELSE TRUE 
            END
          ) AS "IsChecked",
          work_number AS "Sort1"
        FROM
          wash.work W
          INNER JOIN wash.price P ON P.work_id = W.work_id
          INNER JOIN wash.category C ON C.category_id = P.category_id
        WHERE
          NOT W.deleted
          AND P.price > 0
          AND W.client_id ISNULL
          AND C.category_key LIKE 't_truck%'
        ORDER BY
          "Sort1"
      </Text>
    </SqlQuery>

    <SqlQuery Name="ProductSelectSqlQuery">
      <Text>
        SELECT
          P.work_id AS "WorkId",
          work_number || '. ' || W.title AS "Title",
          P.price AS "Price",
          P.price_id AS "PriceId",
          (SELECT
            CASE 
              WHEN (SELECT order_id FROM wash.order_product WHERE order_id = {OrderId} AND price_id = P.price_id) ISNULL THEN FALSE
              ELSE TRUE
            END
          ) AS "IsChecked",
          work_number AS "Sort"
        FROM
          wash.price P
          INNER JOIN wash.work W ON W.work_id = P.work_id
        WHERE
          NOT W.deleted
          AND category_id = (SELECT category_id FROM wash.category WHERE category_key = 'product')
          AND W.client_id ISNULL
        ORDER BY
          "Sort",
          "Title"
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderAllWorksSelectSqlQuery">
      <Text>
		WITH _works AS(
		  SELECT 
		    title,
		    W.work_id,
		    W.work_number,
		    W.part_id,
		    P.price_id,
		    P.category_id,
		    price
		  FROM 
		    wash.work W 
		    INNER JOIN wash.price P USING(work_id)
		), _order_work AS (
		  SELECT
		    OW.order_work_id AS order_work_id,
		    OW.price_id,
		    (SELECT part_number FROM _works T INNER JOIN wash.part P ON P.part_id = T.part_id WHERE T.price_id = OW.price_id) AS sort_1,
		    _works.work_number AS sort_2,
		    (SELECT part_number FROM _works T INNER JOIN wash.part P ON P.part_id = T.part_id WHERE T.price_id = OW.price_id) || '.'
		      || _works.work_number || '. '
		      || _works.title
		      || (SELECT CASE WHEN _works.category_id = 8 THEN ' [СПЕЦСРЕДСТВА]' ELSE '' END) AS title,
		    _works.price,
		    OW.discount AS discount,
		    round(_works.price * (1 - OW.discount * 0.01)) AS price_with_discount,
		    OW.quantity,
		    OW.price * OW.quantity AS summ,
		    round(_works.price * (1 - OW.discount * 0.01)) * OW.quantity AS summ_with_discount,
		    'work'::text AS type
		  FROM
		    wash.order_work OW
		    LEFT JOIN _works USING(price_id)
		  WHERE
		    OW.order_id = {OrderId}
		), _order_product AS (
		  SELECT
		    OP.order_product_id,
		    OP.price_id,
		    NULL::smallint,
		    NULL::smallint,
		    _works.title,
		    OP.price,
		    OP.discount AS discount,
		    round(OP.price * (1 - OP.discount * 0.01)) AS price_with_discount,
		    OP.quantity,
		    OP.price * OP.quantity,
		    round(OP.price * (1 - OP.discount * 0.01)) * OP.quantity AS summ_with_discount,
		    'product'::text
		  FROM
		    wash.order_product OP
		    LEFT JOIN _works USING(price_id)
		  WHERE
		    OP.order_id = {OrderId}
		), _order_other_work AS (
		  SELECT
		    OOW.order_other_work_id,
		    0::integer,
		    NULL::smallint,
		    NULL::smallint,
		    OOW.title,
		    OOW.price,
		    OOW.discount AS discount,
		    round(OOW.price * (1 - OOW.discount * 0.01)) AS price_with_discount,
		    OOW.quantity,
		    OOW.price * OOW.quantity,
		    round(OOW.price * (1 - OOW.discount * 0.01)) * OOW.quantity AS summ_with_discount,
		    'work'::text
		  FROM
		    wash.order_other_work OOW
		  WHERE
		    OOW.order_id = {OrderId}
		)
		
		SELECT
		  order_work_id AS "OrderWorkId",
		  price_id AS "PriceId",
		  sort_1 AS "Sort1",
		  sort_2 AS "Sort2",
		  title AS "Title",
		  price AS "Price",
		  discount AS "Discount",
		  price_with_discount AS "PriceWithDiscount",
		  quantity AS "Quantity",
		  summ AS "Summ",
		  summ_with_discount AS "SummWithDiscount",
		  type AS "Type",
		  SUM(summ) OVER(PARTITION BY type) AS "Total",
		  SUM(summ_with_discount) OVER(PARTITION BY type) AS "TotalWithDiscount"
		FROM(
		  SELECT * FROM _order_work
		  UNION ALL
		  SELECT * FROM _order_product
		  UNION ALL
		  SELECT * FROM _order_other_work
		) T
		ORDER BY sort_1, sort_2, type DESC, title;
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireOrderAllWorksSelectSqlQuery">
      <Text>
		WITH _works AS(
		  SELECT 
		    title,
		    W.work_id,
		    W.work_number,
		    W.part_id,
		    P.price_id,
		    P.category_id,
		    price
		  FROM 
		    wash.work W 
		    INNER JOIN wash.price P ON P.work_id = W.work_id
		), _order_work AS (
		  SELECT
		    OW.tire_order_work_id AS order_work_id,
		    OW.price_id,
		    (SELECT C.title FROM wash.category C INNER JOIN _works T ON T.category_id = C.category_id WHERE T.price_id = OW.price_id) AS category,
		    _works.work_number AS sort,
		    _works.work_number || '. ' || _works.title AS title,
		    _works.price,
		    OW.discount AS discount,
		    round(_works.price * (1 - OW.discount * 0.01)) AS price_with_discount,
		    OW.quantity,
		    OW.price * OW.quantity AS summ,
		    round(_works.price * (1 - OW.discount * 0.01)) * OW.quantity AS summ_with_discount,
		    'work'::text AS type
		  FROM
		    wash.tire_order_work OW
		    LEFT JOIN _works USING(price_id)
		  WHERE
		    OW.tire_order_id = {OrderId}
		), _order_product AS (
		  SELECT
		    OP.tire_order_product_id,
		    OP.price_id,
		    NULL::character varying,
		    NULL::smallint,
		    _works.title,
		    OP.price,
		    OP.discount AS discount,
		    round(OP.price * (1 - OP.discount * 0.01)) AS price_with_discount,
		    OP.quantity,
		    OP.price * OP.quantity,
		    round(OP.price * (1 - OP.discount * 0.01)) * OP.quantity AS summ_with_discount,
		    'product'::text
		  FROM
		    wash.tire_order_product OP
		    LEFT JOIN _works USING(price_id)
		  WHERE
		    OP.tire_order_id = {OrderId}
		), _order_other_work AS (
		  SELECT
		    OOW.tire_order_other_work_id,
		    0::integer,
		    ' '::character varying,
		    NULL::smallint,
		    OOW.title,
		    OOW.price,
		    OOW.discount AS discount,
		    round(OOW.price * (1 - OOW.discount * 0.01)) AS price_with_discount,
		    OOW.quantity,
		    OOW.price * OOW.quantity,
		    round(OOW.price * (1 - OOW.discount * 0.01)) * OOW.quantity AS summ_with_discount,
		    'work'::text
		  FROM
		    wash.tire_order_other_work OOW
		  WHERE
		    OOW.tire_order_id = {OrderId}
		)
		
		SELECT
		  order_work_id AS "OrderWorkId",
		  price_id AS "PriceId",
		  category AS "Category",
		  sort AS "Sort",
		  title AS "Title",
		  price AS "Price",
		  discount AS "Discount",
		  price_with_discount AS "PriceWithDiscount",
		  quantity AS "Quantity",
		  summ AS "Summ",
		  summ_with_discount AS "SummWithDiscount",
		  type AS "Type",
		  SUM(summ) OVER(PARTITION BY type) AS "Total",
		  SUM(summ_with_discount) OVER(PARTITION BY type) AS "TotalWithDiscount"
		FROM(
		  SELECT * FROM _order_work
		  UNION ALL
		  SELECT * FROM _order_product
		  UNION ALL
		  SELECT * FROM _order_other_work
		) T
		ORDER BY sort, category, type, title;
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireTruckOrderAllWorksSelectSqlQuery">
      <Text>
		WITH _works AS(
		  SELECT 
		    title,
		    W.work_id,
		    W.work_number,
		    W.part_id,
		    P.price_id,
		    P.category_id,
		    price
		  FROM 
		    wash.work W 
		    INNER JOIN wash.price P ON P.work_id = W.work_id
		), _order_work AS (
		  SELECT
		    OW.tire_truck_order_work_id AS order_work_id,
		    OW.price_id,
		    (SELECT C.title FROM wash.category C INNER JOIN _works T ON T.category_id = C.category_id WHERE T.price_id = OW.price_id) AS category,
		    _works.work_number AS sort,
		    _works.work_number || '. ' || _works.title AS title,
		    _works.price,
		    OW.discount AS discount,
		    round(_works.price * (1 - OW.discount * 0.01)) AS price_with_discount,
		    OW.quantity,
		    OW.price * OW.quantity AS summ,
		    round(_works.price * (1 - OW.discount * 0.01)) * OW.quantity AS summ_with_discount,
		    'work'::text AS type
		  FROM
		    wash.tire_truck_order_work OW
		    LEFT JOIN _works USING(price_id)
		  WHERE
		    OW.tire_truck_order_id = {OrderId}
		), _order_product AS (
		  SELECT
		    OP.tire_truck_order_product_id,
		    OP.price_id,
		    NULL::character varying,
		    NULL::smallint,
		    _works.title,
		    OP.price,
		    OP.discount AS discount,
		    round(OP.price * (1 - OP.discount * 0.01)) AS price_with_discount,
		    OP.quantity,
		    OP.price * OP.quantity,
		    round(OP.price * (1 - OP.discount * 0.01)) * OP.quantity AS summ_with_discount,
		    'product'::text
		  FROM
		    wash.tire_truck_order_product OP
		    LEFT JOIN _works USING(price_id)
		  WHERE
		    OP.tire_truck_order_id = {OrderId}
		), _order_other_work AS (
		  SELECT
		    OOW.tire_truck_order_other_work_id,
		    0::integer,
		    ' '::character varying,
		    NULL::smallint,
		    OOW.title,
		    OOW.price,
		    OOW.discount AS discount,
		    round(OOW.price * (1 - OOW.discount * 0.01)) AS price_with_discount,
		    OOW.quantity,
		    OOW.price * OOW.quantity,
		    round(OOW.price * (1 - OOW.discount * 0.01)) * OOW.quantity AS summ_with_discount,
		    'work'::text
		  FROM
		    wash.tire_truck_order_other_work OOW
		  WHERE
		    OOW.tire_truck_order_id = {OrderId}
		 )
		
		SELECT
		  order_work_id AS "OrderWorkId",
		  price_id AS "PriceId",
		  category AS "Category",
		  sort AS "Sort",
		  title AS "Title",
		  price AS "Price",
		  discount AS "Discount",
		  price_with_discount AS "PriceWithDiscount",
		  quantity AS "Quantity",
		  summ AS "Summ",
		  summ_with_discount AS "SummWithDiscount",
		  type AS "Type",
		  SUM(summ) OVER(PARTITION BY type) AS "Total",
		  SUM(summ_with_discount) OVER(PARTITION BY type) AS "TotalWithDiscount"
		FROM(
		  SELECT * FROM _order_work
		  UNION ALL
		  SELECT * FROM _order_product
		  UNION ALL
		  SELECT * FROM _order_other_work
		) T
		ORDER BY sort, category, type, title;
      </Text>
    </SqlQuery>

    <SqlQuery Name="PricePassSelectSqlQuery">
      <Text>
        WITH 
          tmp 
        AS(
          SELECT
            W.work_id AS work_id,
            C.category_key AS category_key,
            P.price_id AS price_id,
            P.price AS price
          FROM
            wash.price P
            INNER JOIN wash.work W ON W.work_id = P.work_id
            INNER JOIN wash.category C ON P.category_id = C.category_id
          WHERE
            NOT W.deleted
            AND COALESCE({ClientId}, 0) = COALESCE(W.client_id, 0)
          )
        
        SELECT
          T.work_id AS "WorkId",
          T.work_number AS "WorkNumber",
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) || '.' || T.work_number AS "FullWorkNumber",
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) AS "Sort",
          T.part_id AS "PartId",
          T.default_quantity AS "DefaultQuantity",
          T.title AS "Title",
          (SELECT price_id FROM tmp WHERE category_key = 'pass1' AND T.work_id = work_id) AS "PriceId1",
          (SELECT price_id FROM tmp WHERE category_key = 'pass2' AND T.work_id = work_id) AS "PriceId2",
          (SELECT price_id FROM tmp WHERE category_key = 'pass3' AND T.work_id = work_id) AS "PriceId3",
          (SELECT price_id FROM tmp WHERE category_key = 'pass4' AND T.work_id = work_id) AS "PriceId4",
          (SELECT price_id FROM tmp WHERE category_key = 'pass5' AND T.work_id = work_id) AS "PriceId5",
          (SELECT price_id FROM tmp WHERE category_key = 'pass6' AND T.work_id = work_id) AS "PriceId6",
          (SELECT price_id FROM tmp WHERE category_key = 'pass7' AND T.work_id = work_id) AS "PriceId7",
          (SELECT price FROM tmp WHERE category_key = 'pass1' AND T.work_id = work_id) AS "Price1",
          (SELECT price FROM tmp WHERE category_key = 'pass2' AND T.work_id = work_id) AS "Price2",
          (SELECT price FROM tmp WHERE category_key = 'pass3' AND T.work_id = work_id) AS "Price3",
          (SELECT price FROM tmp WHERE category_key = 'pass4' AND T.work_id = work_id) AS "Price4",
          (SELECT price FROM tmp WHERE category_key = 'pass5' AND T.work_id = work_id) AS "Price5",
          (SELECT price FROM tmp WHERE category_key = 'pass6' AND T.work_id = work_id) AS "Price6",
          (SELECT price FROM tmp WHERE category_key = 'pass7' AND T.work_id = work_id) AS "Price7"
        FROM
          wash.work T
        WHERE
          NOT T.deleted
          AND COALESCE({ClientId}, 0) = COALESCE(T.client_id, 0)
          AND (SELECT price_type FROM wash.part WHERE part_id = T.part_id) = 'pass'
        ORDER BY
          "Sort",
          "WorkNumber"
      </Text>
    </SqlQuery>

    <SqlQuery Name="PricePassPrintableSelectSqlQuery">
      <Text>
        WITH 
          tmp 
        AS(
          SELECT
            W.work_id AS work_id,
            C.category_key AS category_key,
            P.price_id AS price_id,
            P.price AS price
          FROM
            wash.price P
            INNER JOIN wash.work W ON W.work_id = P.work_id
            INNER JOIN wash.category C ON P.category_id = C.category_id
          WHERE
            NOT W.deleted
            AND COALESCE({ClientId}, 0) = COALESCE(W.client_id, 0)
        )
        
        SELECT
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) || '.' || T.work_number AS "Number",
          T.title AS "Work",
          (SELECT CASE WHEN price = 0 THEN '–' ELSE price::character varying END FROM tmp WHERE category_key = 'pass1' AND T.work_id = work_id) AS "Price1",
          (SELECT CASE WHEN price = 0 THEN '–' ELSE price::character varying END FROM tmp WHERE category_key = 'pass2' AND T.work_id = work_id) AS "Price2",
          (SELECT CASE WHEN price = 0 THEN '–' ELSE price::character varying END FROM tmp WHERE category_key = 'pass3' AND T.work_id = work_id) AS "Price3",
          (SELECT CASE WHEN price = 0 THEN '–' ELSE price::character varying END FROM tmp WHERE category_key = 'pass4' AND T.work_id = work_id) AS "Price4",
          (SELECT CASE WHEN price = 0 THEN '–' ELSE price::character varying END FROM tmp WHERE category_key = 'pass5' AND T.work_id = work_id) AS "Price5",
          (SELECT CASE WHEN price = 0 THEN '–' ELSE price::character varying END FROM tmp WHERE category_key = 'pass6' AND T.work_id = work_id) AS "Price6",
          (SELECT CASE WHEN price = 0 THEN '–' ELSE price::character varying END FROM tmp WHERE category_key = 'pass7' AND T.work_id = work_id) AS "Price7",
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) AS "Sort",
          True AS "Sort2",
          T.work_number AS "Sort3"
        FROM
          wash.work T
        WHERE
          NOT T.deleted
          AND COALESCE({ClientId}, 0) = COALESCE(T.client_id, 0)
          AND (SELECT price_type FROM wash.part WHERE part_id = T.part_id) = 'pass'
        
        UNION ALL
        
        SELECT
          part_number::character varying AS "Number",
          title AS "Work",
          NULL AS "Price1",
          NULL AS "Price2",
          NULL AS "Price3",
          NULL AS "Price4",
          NULL AS "Price5",
          NULL AS "Price6",
          NULL AS "Price7",
          part_number AS "Sort",
          False AS "Sort2",
          NULL AS "Sort3"
        FROM
          wash.part
        WHERE
          price_type = 'pass'
          
        ORDER BY
          "Sort",
          "Sort2",
          "Sort3"
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceTruckSelectSqlQuery">
      <Text>
        WITH 
          tmp 
        AS(
          SELECT
            W.work_id AS work_id,
            C.category_key AS category_key,
            P.price_id AS price_id,
            P.price AS price
          FROM
            wash.price P
            INNER JOIN wash.work W ON W.work_id = P.work_id
            INNER JOIN wash.category C ON P.category_id = C.category_id
          WHERE
            NOT W.deleted
            AND COALESCE({ClientId}, 0) = COALESCE(W.client_id, 0)
          )
        
        SELECT
          T.work_id AS "WorkId",
          T.work_number AS "WorkNumber",
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) || '.' || T.work_number AS "FullWorkNumber",
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) AS "Sort",
          T.part_id AS "PartId",
          T.default_quantity AS "DefaultQuantity",
          T.title AS "Title",
          (SELECT price_id FROM tmp WHERE category_key = 'truck' AND T.work_id = work_id) AS "PriceId",
          (SELECT price_id FROM tmp WHERE category_key = 'truck_spec' AND T.work_id = work_id) AS "PriceIdSpec",
          (SELECT price FROM tmp WHERE category_key = 'truck' AND T.work_id = work_id) AS "Price",
          (SELECT price FROM tmp WHERE category_key = 'truck_spec' AND T.work_id = work_id) AS "PriceSpec"
        FROM
          wash.work T
        WHERE
          NOT T.deleted
          AND COALESCE({ClientId}, 0) = COALESCE(T.client_id, 0)
          AND (SELECT price_type FROM wash.part WHERE part_id = T.part_id) = 'truck'
        ORDER BY
          "Sort",
          "WorkNumber"
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceTruckPrintableSelectSqlQuery">
      <Text>
        WITH 
          tmp 
        AS(
          SELECT
            W.work_id AS work_id,
            C.category_key AS category_key,
            P.price_id AS price_id,
            P.price AS price
          FROM
            wash.price P
            INNER JOIN wash.work W ON W.work_id = P.work_id
            INNER JOIN wash.category C ON P.category_id = C.category_id
          WHERE
            NOT W.deleted
            AND COALESCE({ClientId}, 0) = COALESCE(W.client_id, 0)
        )
        
        SELECT
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) || '.' || T.work_number AS "Number",
          T.title AS "Work",
          (SELECT CASE WHEN price = 0 THEN '–' ELSE price::character varying END FROM tmp WHERE category_key = 'truck' AND T.work_id = work_id) AS "Price1",
          (SELECT CASE WHEN price = 0 OR price = (SELECT price FROM tmp WHERE category_key = 'truck' AND T.work_id = work_id) THEN '–' ELSE price::character varying END FROM tmp WHERE category_key = 'truck_spec' AND T.work_id = work_id) AS "Price2",
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) AS "Sort",
          True AS "Sort2",
          T.work_number AS "Sort3"
        FROM
          wash.work T
        WHERE
          NOT T.deleted
          AND COALESCE({ClientId}, 0) = COALESCE(T.client_id, 0)
          AND (SELECT price_type FROM wash.part WHERE part_id = T.part_id) = 'truck'
        
        UNION ALL
        
        SELECT
          part_number::character varying AS "Number",
          title AS "Work",
          NULL AS "Price1",
          NULL AS "Price2",
          part_number AS "Sort",
          False AS "Sort2",
          NULL AS "Sort3"
        FROM
          wash.part
        WHERE
          price_type = 'truck'
        
        ORDER BY
          "Sort",
          "Sort2",
          "Sort3"
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceTireSelectSqlQuery">
      <Text>
        WITH 
          tmp 
        AS(
          SELECT
            W.work_id AS work_id,
            C.category_key AS category_key,
            C.visible AS visible,
            C.title AS category_title,
            P.price_id AS price_id,
            P.price AS price
          FROM
            wash.price P
            INNER JOIN wash.work W ON W.work_id = P.work_id
            INNER JOIN wash.category C ON P.category_id = C.category_id
          WHERE
            NOT W.deleted
            AND W.client_id ISNULL
          )
        
        SELECT
          T.work_id AS "WorkId",
          T.work_number AS "WorkNumber",
          T.part_id AS "PartId",
          T.default_quantity AS "DefaultQuantity",
          T.title AS "Title",
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) || '.' || T.work_number AS "FullWorkNumber",
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) AS "Sort",
          (SELECT price_id FROM tmp WHERE category_key = 'tire1' AND T.work_id = work_id) AS "PriceId1",
          (SELECT price_id FROM tmp WHERE category_key = 'tire2' AND T.work_id = work_id) AS "PriceId2",
          (SELECT price_id FROM tmp WHERE category_key = 'tire3' AND T.work_id = work_id) AS "PriceId3",
          (SELECT price_id FROM tmp WHERE category_key = 'tire4' AND T.work_id = work_id) AS "PriceId4",
          (SELECT price_id FROM tmp WHERE category_key = 'tire5' AND T.work_id = work_id) AS "PriceId5",
          (SELECT price_id FROM tmp WHERE category_key = 'tire6' AND T.work_id = work_id) AS "PriceId6",
          (SELECT price_id FROM tmp WHERE category_key = 'tire7' AND T.work_id = work_id) AS "PriceId7",
          (SELECT price_id FROM tmp WHERE category_key = 'tire8' AND T.work_id = work_id) AS "PriceId8",
          (SELECT price_id FROM tmp WHERE category_key = 'tire9' AND T.work_id = work_id) AS "PriceId9",
          (SELECT price_id FROM tmp WHERE category_key = 'tire10' AND T.work_id = work_id) AS "PriceId10",
          (SELECT price_id FROM tmp WHERE category_key = 'tire11' AND T.work_id = work_id) AS "PriceId11",
          (SELECT price_id FROM tmp WHERE category_key = 'tire12' AND T.work_id = work_id) AS "PriceId12",
          (SELECT price_id FROM tmp WHERE category_key = 'tire13' AND T.work_id = work_id) AS "PriceId13",
          (SELECT price_id FROM tmp WHERE category_key = 'tire14' AND T.work_id = work_id) AS "PriceId14",
          (SELECT price_id FROM tmp WHERE category_key = 'tire15' AND T.work_id = work_id) AS "PriceId15",
          (SELECT visible FROM tmp WHERE category_key = 'tire1' AND T.work_id = work_id) AS "Visible1",
          (SELECT visible FROM tmp WHERE category_key = 'tire2' AND T.work_id = work_id) AS "Visible2",
          (SELECT visible FROM tmp WHERE category_key = 'tire3' AND T.work_id = work_id) AS "Visible3",
          (SELECT visible FROM tmp WHERE category_key = 'tire4' AND T.work_id = work_id) AS "Visible4",
          (SELECT visible FROM tmp WHERE category_key = 'tire5' AND T.work_id = work_id) AS "Visible5",
          (SELECT visible FROM tmp WHERE category_key = 'tire6' AND T.work_id = work_id) AS "Visible6",
          (SELECT visible FROM tmp WHERE category_key = 'tire7' AND T.work_id = work_id) AS "Visible7",
          (SELECT visible FROM tmp WHERE category_key = 'tire8' AND T.work_id = work_id) AS "Visible8",
          (SELECT visible FROM tmp WHERE category_key = 'tire9' AND T.work_id = work_id) AS "Visible9",
          (SELECT visible FROM tmp WHERE category_key = 'tire10' AND T.work_id = work_id) AS "Visible10",
          (SELECT visible FROM tmp WHERE category_key = 'tire11' AND T.work_id = work_id) AS "Visible11",
          (SELECT visible FROM tmp WHERE category_key = 'tire12' AND T.work_id = work_id) AS "Visible12",
          (SELECT visible FROM tmp WHERE category_key = 'tire13' AND T.work_id = work_id) AS "Visible13",
          (SELECT visible FROM tmp WHERE category_key = 'tire14' AND T.work_id = work_id) AS "Visible14",
          (SELECT visible FROM tmp WHERE category_key = 'tire15' AND T.work_id = work_id) AS "Visible15",
          (SELECT category_title FROM tmp WHERE category_key = 'tire1' AND T.work_id = work_id) AS "CategoryTitle1",
          (SELECT category_title FROM tmp WHERE category_key = 'tire2' AND T.work_id = work_id) AS "CategoryTitle2",
          (SELECT category_title FROM tmp WHERE category_key = 'tire3' AND T.work_id = work_id) AS "CategoryTitle3",
          (SELECT category_title FROM tmp WHERE category_key = 'tire4' AND T.work_id = work_id) AS "CategoryTitle4",
          (SELECT category_title FROM tmp WHERE category_key = 'tire5' AND T.work_id = work_id) AS "CategoryTitle5",
          (SELECT category_title FROM tmp WHERE category_key = 'tire6' AND T.work_id = work_id) AS "CategoryTitle6",
          (SELECT category_title FROM tmp WHERE category_key = 'tire7' AND T.work_id = work_id) AS "CategoryTitle7",
          (SELECT category_title FROM tmp WHERE category_key = 'tire8' AND T.work_id = work_id) AS "CategoryTitle8",
          (SELECT category_title FROM tmp WHERE category_key = 'tire9' AND T.work_id = work_id) AS "CategoryTitle9",
          (SELECT category_title FROM tmp WHERE category_key = 'tire10' AND T.work_id = work_id) AS "CategoryTitle10",
          (SELECT category_title FROM tmp WHERE category_key = 'tire11' AND T.work_id = work_id) AS "CategoryTitle11",
          (SELECT category_title FROM tmp WHERE category_key = 'tire12' AND T.work_id = work_id) AS "CategoryTitle12",
          (SELECT category_title FROM tmp WHERE category_key = 'tire13' AND T.work_id = work_id) AS "CategoryTitle13",
          (SELECT category_title FROM tmp WHERE category_key = 'tire14' AND T.work_id = work_id) AS "CategoryTitle14",
          (SELECT category_title FROM tmp WHERE category_key = 'tire15' AND T.work_id = work_id) AS "CategoryTitle15",
          (SELECT price FROM tmp WHERE category_key = 'tire1' AND T.work_id = work_id) AS "Price1",
          (SELECT price FROM tmp WHERE category_key = 'tire2' AND T.work_id = work_id) AS "Price2",
          (SELECT price FROM tmp WHERE category_key = 'tire3' AND T.work_id = work_id) AS "Price3",
          (SELECT price FROM tmp WHERE category_key = 'tire4' AND T.work_id = work_id) AS "Price4",
          (SELECT price FROM tmp WHERE category_key = 'tire5' AND T.work_id = work_id) AS "Price5",
          (SELECT price FROM tmp WHERE category_key = 'tire6' AND T.work_id = work_id) AS "Price6",
          (SELECT price FROM tmp WHERE category_key = 'tire7' AND T.work_id = work_id) AS "Price7",
          (SELECT price FROM tmp WHERE category_key = 'tire8' AND T.work_id = work_id) AS "Price8",
          (SELECT price FROM tmp WHERE category_key = 'tire9' AND T.work_id = work_id) AS "Price9",
          (SELECT price FROM tmp WHERE category_key = 'tire10' AND T.work_id = work_id) AS "Price10",
          (SELECT price FROM tmp WHERE category_key = 'tire11' AND T.work_id = work_id) AS "Price11",
          (SELECT price FROM tmp WHERE category_key = 'tire12' AND T.work_id = work_id) AS "Price12",
          (SELECT price FROM tmp WHERE category_key = 'tire13' AND T.work_id = work_id) AS "Price13",
          (SELECT price FROM tmp WHERE category_key = 'tire14' AND T.work_id = work_id) AS "Price14",
          (SELECT price FROM tmp WHERE category_key = 'tire15' AND T.work_id = work_id) AS "Price15"
        FROM
          wash.work T
        WHERE
          NOT T.deleted
          AND (SELECT price_type FROM wash.part WHERE part_id = T.part_id) = 'tire'
        ORDER BY
          "Sort",
          "WorkNumber"
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceTireTruckSelectSqlQuery">
      <Text>
        WITH 
          tmp 
        AS(
          SELECT
            W.work_id AS work_id,
            C.category_key AS category_key,
            C.visible AS visible,
            C.title AS category_title,
            P.price_id AS price_id,
            P.price AS price
          FROM
            wash.price P
            INNER JOIN wash.work W ON W.work_id = P.work_id
            INNER JOIN wash.category C ON P.category_id = C.category_id
          WHERE
            NOT W.deleted
            AND W.client_id ISNULL
          )
        
        SELECT
          T.work_id AS "WorkId",
          T.work_number AS "WorkNumber",
          T.part_id AS "PartId",
          T.default_quantity AS "DefaultQuantity",
          T.title AS "Title",
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) || '.' || T.work_number AS "FullWorkNumber",
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) AS "Sort",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck1' AND T.work_id = work_id) AS "PriceId1",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck2' AND T.work_id = work_id) AS "PriceId2",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck3' AND T.work_id = work_id) AS "PriceId3",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck4' AND T.work_id = work_id) AS "PriceId4",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck5' AND T.work_id = work_id) AS "PriceId5",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck6' AND T.work_id = work_id) AS "PriceId6",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck7' AND T.work_id = work_id) AS "PriceId7",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck8' AND T.work_id = work_id) AS "PriceId8",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck9' AND T.work_id = work_id) AS "PriceId9",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck10' AND T.work_id = work_id) AS "PriceId10",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck11' AND T.work_id = work_id) AS "PriceId11",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck12' AND T.work_id = work_id) AS "PriceId12",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck13' AND T.work_id = work_id) AS "PriceId13",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck14' AND T.work_id = work_id) AS "PriceId14",
          (SELECT price_id FROM tmp WHERE category_key = 't_truck15' AND T.work_id = work_id) AS "PriceId15",
          (SELECT visible FROM tmp WHERE category_key = 't_truck1' AND T.work_id = work_id) AS "Visible1",
          (SELECT visible FROM tmp WHERE category_key = 't_truck2' AND T.work_id = work_id) AS "Visible2",
          (SELECT visible FROM tmp WHERE category_key = 't_truck3' AND T.work_id = work_id) AS "Visible3",
          (SELECT visible FROM tmp WHERE category_key = 't_truck4' AND T.work_id = work_id) AS "Visible4",
          (SELECT visible FROM tmp WHERE category_key = 't_truck5' AND T.work_id = work_id) AS "Visible5",
          (SELECT visible FROM tmp WHERE category_key = 't_truck6' AND T.work_id = work_id) AS "Visible6",
          (SELECT visible FROM tmp WHERE category_key = 't_truck7' AND T.work_id = work_id) AS "Visible7",
          (SELECT visible FROM tmp WHERE category_key = 't_truck8' AND T.work_id = work_id) AS "Visible8",
          (SELECT visible FROM tmp WHERE category_key = 't_truck9' AND T.work_id = work_id) AS "Visible9",
          (SELECT visible FROM tmp WHERE category_key = 't_truck10' AND T.work_id = work_id) AS "Visible10",
          (SELECT visible FROM tmp WHERE category_key = 't_truck11' AND T.work_id = work_id) AS "Visible11",
          (SELECT visible FROM tmp WHERE category_key = 't_truck12' AND T.work_id = work_id) AS "Visible12",
          (SELECT visible FROM tmp WHERE category_key = 't_truck13' AND T.work_id = work_id) AS "Visible13",
          (SELECT visible FROM tmp WHERE category_key = 't_truck14' AND T.work_id = work_id) AS "Visible14",
          (SELECT visible FROM tmp WHERE category_key = 't_truck15' AND T.work_id = work_id) AS "Visible15",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck1' AND T.work_id = work_id) AS "CategoryTitle1",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck2' AND T.work_id = work_id) AS "CategoryTitle2",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck3' AND T.work_id = work_id) AS "CategoryTitle3",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck4' AND T.work_id = work_id) AS "CategoryTitle4",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck5' AND T.work_id = work_id) AS "CategoryTitle5",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck6' AND T.work_id = work_id) AS "CategoryTitle6",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck7' AND T.work_id = work_id) AS "CategoryTitle7",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck8' AND T.work_id = work_id) AS "CategoryTitle8",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck9' AND T.work_id = work_id) AS "CategoryTitle9",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck10' AND T.work_id = work_id) AS "CategoryTitle10",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck11' AND T.work_id = work_id) AS "CategoryTitle11",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck12' AND T.work_id = work_id) AS "CategoryTitle12",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck13' AND T.work_id = work_id) AS "CategoryTitle13",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck14' AND T.work_id = work_id) AS "CategoryTitle14",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck15' AND T.work_id = work_id) AS "CategoryTitle15",
          (SELECT price FROM tmp WHERE category_key = 't_truck1' AND T.work_id = work_id) AS "Price1",
          (SELECT price FROM tmp WHERE category_key = 't_truck2' AND T.work_id = work_id) AS "Price2",
          (SELECT price FROM tmp WHERE category_key = 't_truck3' AND T.work_id = work_id) AS "Price3",
          (SELECT price FROM tmp WHERE category_key = 't_truck4' AND T.work_id = work_id) AS "Price4",
          (SELECT price FROM tmp WHERE category_key = 't_truck5' AND T.work_id = work_id) AS "Price5",
          (SELECT price FROM tmp WHERE category_key = 't_truck6' AND T.work_id = work_id) AS "Price6",
          (SELECT price FROM tmp WHERE category_key = 't_truck7' AND T.work_id = work_id) AS "Price7",
          (SELECT price FROM tmp WHERE category_key = 't_truck8' AND T.work_id = work_id) AS "Price8",
          (SELECT price FROM tmp WHERE category_key = 't_truck9' AND T.work_id = work_id) AS "Price9",
          (SELECT price FROM tmp WHERE category_key = 't_truck10' AND T.work_id = work_id) AS "Price10",
          (SELECT price FROM tmp WHERE category_key = 't_truck11' AND T.work_id = work_id) AS "Price11",
          (SELECT price FROM tmp WHERE category_key = 't_truck12' AND T.work_id = work_id) AS "Price12",
          (SELECT price FROM tmp WHERE category_key = 't_truck13' AND T.work_id = work_id) AS "Price13",
          (SELECT price FROM tmp WHERE category_key = 't_truck14' AND T.work_id = work_id) AS "Price14",
          (SELECT price FROM tmp WHERE category_key = 't_truck15' AND T.work_id = work_id) AS "Price15"
        FROM
          wash.work T
        WHERE
          NOT T.deleted
          AND (SELECT price_type FROM wash.part WHERE part_id = T.part_id) = 'tire_truck'
        ORDER BY
          "Sort",
          "WorkNumber"
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceTirePrintableSelectSqlQuery">
      <Text>
        WITH 
          tmp 
        AS(
          SELECT
            W.work_id AS work_id,
            C.category_key AS category_key,
            C.title AS category_title,
            P.price_id AS price_id,
            P.price AS price
          FROM
            wash.price P
            INNER JOIN wash.work W ON W.work_id = P.work_id
            INNER JOIN wash.category C ON P.category_id = C.category_id
          WHERE
            NOT W.deleted
            AND W.client_id ISNULL
        )
        SELECT
          T.work_number AS "Number",
          T.title AS "Work",
          (SELECT price FROM tmp WHERE category_key = 'tire1' AND T.work_id = work_id) AS "Price1",
          (SELECT price FROM tmp WHERE category_key = 'tire2' AND T.work_id = work_id) AS "Price2",
          (SELECT price FROM tmp WHERE category_key = 'tire3' AND T.work_id = work_id) AS "Price3",
          (SELECT price FROM tmp WHERE category_key = 'tire4' AND T.work_id = work_id) AS "Price4",
          (SELECT price FROM tmp WHERE category_key = 'tire5' AND T.work_id = work_id) AS "Price5",
          (SELECT price FROM tmp WHERE category_key = 'tire6' AND T.work_id = work_id) AS "Price6",
          (SELECT price FROM tmp WHERE category_key = 'tire7' AND T.work_id = work_id) AS "Price7",
          (SELECT price FROM tmp WHERE category_key = 'tire8' AND T.work_id = work_id) AS "Price8",
          (SELECT price FROM tmp WHERE category_key = 'tire9' AND T.work_id = work_id) AS "Price9",
          (SELECT price FROM tmp WHERE category_key = 'tire10' AND T.work_id = work_id) AS "Price10",
          (SELECT price FROM tmp WHERE category_key = 'tire11' AND T.work_id = work_id) AS "Price11",
          (SELECT price FROM tmp WHERE category_key = 'tire12' AND T.work_id = work_id) AS "Price12",
          (SELECT price FROM tmp WHERE category_key = 'tire13' AND T.work_id = work_id) AS "Price13",
          (SELECT price FROM tmp WHERE category_key = 'tire14' AND T.work_id = work_id) AS "Price14",
          (SELECT price FROM tmp WHERE category_key = 'tire15' AND T.work_id = work_id) AS "Price15",
          (SELECT category_title FROM tmp WHERE category_key = 'tire1' AND T.work_id = work_id) AS "Title1",
          (SELECT category_title FROM tmp WHERE category_key = 'tire2' AND T.work_id = work_id) AS "Title2",
          (SELECT category_title FROM tmp WHERE category_key = 'tire3' AND T.work_id = work_id) AS "Title3",
          (SELECT category_title FROM tmp WHERE category_key = 'tire4' AND T.work_id = work_id) AS "Title4",
          (SELECT category_title FROM tmp WHERE category_key = 'tire5' AND T.work_id = work_id) AS "Title5",
          (SELECT category_title FROM tmp WHERE category_key = 'tire6' AND T.work_id = work_id) AS "Title6",
          (SELECT category_title FROM tmp WHERE category_key = 'tire7' AND T.work_id = work_id) AS "Title7",
          (SELECT category_title FROM tmp WHERE category_key = 'tire8' AND T.work_id = work_id) AS "Title8",
          (SELECT category_title FROM tmp WHERE category_key = 'tire9' AND T.work_id = work_id) AS "Title9",
          (SELECT category_title FROM tmp WHERE category_key = 'tire10' AND T.work_id = work_id) AS "Title10",
          (SELECT category_title FROM tmp WHERE category_key = 'tire11' AND T.work_id = work_id) AS "Title11",
          (SELECT category_title FROM tmp WHERE category_key = 'tire12' AND T.work_id = work_id) AS "Title12",
          (SELECT category_title FROM tmp WHERE category_key = 'tire13' AND T.work_id = work_id) AS "Title13",
          (SELECT category_title FROM tmp WHERE category_key = 'tire14' AND T.work_id = work_id) AS "Title14",
          (SELECT category_title FROM tmp WHERE category_key = 'tire15' AND T.work_id = work_id) AS "Title15"
        FROM
          wash.work T
        WHERE
          NOT T.deleted
          AND (SELECT price_type FROM wash.part WHERE part_id = T.part_id) = 'tire'
        ORDER BY
          "Number"
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceTireTruckPrintableSelectSqlQuery">
      <Text>
        WITH 
          tmp 
        AS(
          SELECT
            W.work_id AS work_id,
            C.category_key AS category_key,
            C.title AS category_title,
            P.price_id AS price_id,
            P.price AS price
          FROM
            wash.price P
            INNER JOIN wash.work W ON W.work_id = P.work_id
            INNER JOIN wash.category C ON P.category_id = C.category_id
          WHERE
            NOT W.deleted
            AND W.client_id ISNULL
        )
        SELECT
          T.work_number AS "Number",
          T.title AS "Work",
          (SELECT price FROM tmp WHERE category_key = 't_truck1' AND T.work_id = work_id) AS "Price1",
          (SELECT price FROM tmp WHERE category_key = 't_truck2' AND T.work_id = work_id) AS "Price2",
          (SELECT price FROM tmp WHERE category_key = 't_truck3' AND T.work_id = work_id) AS "Price3",
          (SELECT price FROM tmp WHERE category_key = 't_truck4' AND T.work_id = work_id) AS "Price4",
          (SELECT price FROM tmp WHERE category_key = 't_truck5' AND T.work_id = work_id) AS "Price5",
          (SELECT price FROM tmp WHERE category_key = 't_truck6' AND T.work_id = work_id) AS "Price6",
          (SELECT price FROM tmp WHERE category_key = 't_truck7' AND T.work_id = work_id) AS "Price7",
          (SELECT price FROM tmp WHERE category_key = 't_truck8' AND T.work_id = work_id) AS "Price8",
          (SELECT price FROM tmp WHERE category_key = 't_truck9' AND T.work_id = work_id) AS "Price9",
          (SELECT price FROM tmp WHERE category_key = 't_truck10' AND T.work_id = work_id) AS "Price10",
          (SELECT price FROM tmp WHERE category_key = 't_truck11' AND T.work_id = work_id) AS "Price11",
          (SELECT price FROM tmp WHERE category_key = 't_truck12' AND T.work_id = work_id) AS "Price12",
          (SELECT price FROM tmp WHERE category_key = 't_truck13' AND T.work_id = work_id) AS "Price13",
          (SELECT price FROM tmp WHERE category_key = 't_truck14' AND T.work_id = work_id) AS "Price14",
          (SELECT price FROM tmp WHERE category_key = 't_truck15' AND T.work_id = work_id) AS "Price15",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck1' AND T.work_id = work_id) AS "Title1",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck2' AND T.work_id = work_id) AS "Title2",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck3' AND T.work_id = work_id) AS "Title3",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck4' AND T.work_id = work_id) AS "Title4",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck5' AND T.work_id = work_id) AS "Title5",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck6' AND T.work_id = work_id) AS "Title6",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck7' AND T.work_id = work_id) AS "Title7",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck8' AND T.work_id = work_id) AS "Title8",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck9' AND T.work_id = work_id) AS "Title9",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck10' AND T.work_id = work_id) AS "Title10",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck11' AND T.work_id = work_id) AS "Title11",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck12' AND T.work_id = work_id) AS "Title12",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck13' AND T.work_id = work_id) AS "Title13",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck14' AND T.work_id = work_id) AS "Title14",
          (SELECT category_title FROM tmp WHERE category_key = 't_truck15' AND T.work_id = work_id) AS "Title15"
        FROM
          wash.work T
        WHERE
          NOT T.deleted
          AND (SELECT price_type FROM wash.part WHERE part_id = T.part_id) = 'tire_truck'
        ORDER BY
          "Number"
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceProductSelectSqlQuery">
      <Text>
        WITH 
          tmp 
        AS(
          SELECT
            W.work_id AS work_id,
            C.category_key AS category_key,
            P.price_id AS price_id,
            P.price AS price
          FROM
            wash.price P
            INNER JOIN wash.work W ON W.work_id = P.work_id
            INNER JOIN wash.category C ON P.category_id = C.category_id
          WHERE
            NOT W.deleted
          )
        
        SELECT
          T.work_id AS "WorkId",
          T.work_number AS "WorkNumber",
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) AS "Sort",
          T.part_id AS "PartId",
          T.default_quantity AS "DefaultQuantity",
          T.title AS "Title",
          (SELECT price_id FROM tmp WHERE category_key = 'product' AND T.work_id = work_id) AS "PriceId",
          (SELECT price FROM tmp WHERE category_key = 'product' AND T.work_id = work_id) AS "Price"
        FROM
          wash.work T
        WHERE
          NOT T.deleted
          AND (SELECT price_type FROM wash.part WHERE part_id = T.part_id) = 'product'
        ORDER BY
          "Sort",
          "WorkNumber"
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceProductPrintableSelectSqlQuery">
      <Text>
        WITH 
          tmp 
        AS(
          SELECT
            W.work_id AS work_id,
            C.category_key AS category_key,
            P.price_id AS price_id,
            P.price AS price
          FROM
            wash.price P
            INNER JOIN wash.work W ON W.work_id = P.work_id
            INNER JOIN wash.category C ON P.category_id = C.category_id
          WHERE
            NOT W.deleted
          )
        
        SELECT
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) || '.' || T.work_number AS "Number",
          T.title AS "Work",
          (SELECT price FROM tmp WHERE category_key = 'product' AND T.work_id = work_id) AS "Price",
          (SELECT part_number FROM wash.part WHERE T.part_id = part_id) AS "Sort",
          True AS "Sort2",
          T.work_number AS "Sort3"
        FROM
          wash.work T
        WHERE
          NOT T.deleted
          AND (SELECT price_type FROM wash.part WHERE part_id = T.part_id) = 'product'
        
        UNION ALL
        
        SELECT
          part_number::character varying AS "Number",
          title AS "Work",
          NULL AS "Price",
          part_number AS "Sort",
          False AS "Sort2",
          NULL AS "Sort3"
        FROM
          wash.part
        WHERE
          price_type = 'product'
        
        ORDER BY
          "Sort",
          "Sort2",
          "Sort3"
      </Text>
    </SqlQuery>

    <SqlQuery Name="PartSelectSqlQuery">
      <Text>
        SELECT
          part_id AS "PartId",
          part_number AS "PartNumber",
          title AS "Title",
          price_type AS "PriceType"
        FROM
          wash.part
        ORDER BY
          part_number
      </Text>
    </SqlQuery>

    <SqlQuery Name="PartPassSelectSqlQuery">
      <Text>
        SELECT
          part_id AS "PartId",
          part_number || '. ' || title AS "Title"
        FROM
          wash.part
        WHERE
          price_type = 'pass'
        ORDER BY
          part_number
      </Text>
    </SqlQuery>

    <SqlQuery Name="PartTruckSelectSqlQuery">
      <Text>
        SELECT
          part_id AS "PartId",
          part_number || '. ' || title AS "Title"
        FROM
          wash.part
        WHERE
          price_type = 'truck'
        ORDER BY
          part_number
      </Text>
    </SqlQuery>

    <SqlQuery Name="PartTireSelectSqlQuery">
      <Text>
        SELECT
          part_id AS "PartId",
          part_number || '. ' || title AS "Title"
        FROM
          wash.part
        WHERE
          price_type = 'tire'
        ORDER BY
          part_number
      </Text>
    </SqlQuery>

    <SqlQuery Name="PartTireTruckSelectSqlQuery">
      <Text>
        SELECT
          part_id AS "PartId",
          part_number || '. ' || title AS "Title"
        FROM
          wash.part
        WHERE
          price_type = 'tire_truck'
        ORDER BY
          part_number
      </Text>
    </SqlQuery>

    <SqlQuery Name="PartProductSelectSqlQuery">
      <Text>
        SELECT
          part_id AS "PartId",
          part_number || '. ' || title AS "Title"
        FROM
          wash.part
        WHERE
          price_type = 'product'
        ORDER BY
          part_number
      </Text>
    </SqlQuery>

    <SqlQuery Name="PartCheckSelectSqlQuery">
      <Text>
        SELECT 
          COUNT(*) AS "Count"
        FROM 
          wash.work
        WHERE
          part_id = {PartId}
      </Text>
    </SqlQuery>

    <!-- - - - - - - - - EDIT WORKS - - - - - - - - -->
    <SqlQuery Name="OrderWorkInsertOrDeleteSqlQuery">
      <Text>
		INSERT INTO wash.order_work (
		  order_id, 
		  price_id, 
		  quantity, 
		  price,
		  discount
		)
		SELECT
		  {OrderId}, 
		  {PriceId}, 
		  W.default_quantity, 
		  P.price,
		  wash.get_discount_value_by_key('cash_work_wash')
		FROM
		  wash.price P
		  INNER JOIN wash.work W ON W.work_id = P.work_id
		WHERE
		  {IsChecked} AND
		  {PriceId} IS NOT NULL AND
		  P.price_id = {PriceId} AND
		  NOT EXISTS (SELECT * FROM wash.order_work WHERE order_id = {OrderId} AND price_id = {PriceId});
		
		DELETE FROM wash.order_work
		WHERE 
		  order_id = {OrderId} AND
		  price_id = {PriceId} AND
		  NOT {IsChecked} AND
		  {PriceId} IS NOT NULL;
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderWorkTruckInsertOrDeleteSqlQuery">
      <Text>
        DELETE FROM
          wash.order_work
        WHERE
          {PriceId} IS NOT NULL
          AND order_id = {OrderId}
          AND (price_id = {PriceId} 
            OR price_id = {PriceIdSpec});
        
        INSERT INTO
          wash.order_work (order_id, price_id, quantity, price, discount)
        SELECT
          {OrderId}, {PriceId}, W.default_quantity, P.price, wash.get_discount_value_by_key('cash_work_wash')
        FROM
          wash.price P
          INNER JOIN wash.work W ON W.work_id = P.work_id
        WHERE
          {PriceId} IS NOT NULL
          AND {IsChecked}
          AND NOT COALESCE({IsCheckedSpec}::boolean, False)
          AND P.price_id = {PriceId};
        
        INSERT INTO
          wash.order_work (order_id, price_id, quantity, price, discount)
        SELECT
          {OrderId}, {PriceIdSpec}, W.default_quantity, P.price, wash.get_discount_value_by_key('cash_work_wash')
        FROM
          wash.price P
          INNER JOIN wash.work W ON W.work_id = P.work_id
        WHERE
          {PriceId} IS NOT NULL
          AND {IsChecked}
          AND COALESCE({IsCheckedSpec}::boolean, False)
          AND P.price_id = {PriceIdSpec};
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderWorkTireInsertOrDeleteSqlQuery">
      <Text>
        INSERT INTO wash.tire_order_work (
          tire_order_id, 
          price_id, 
          quantity, 
          price,
          discount
        )
        SELECT
          {OrderId}, 
          {PriceId}, 
          W.default_quantity, 
          P.price,
          wash.get_discount_value_by_key('cash_work_tire')          
        FROM
          wash.price P
          INNER JOIN wash.work W ON W.work_id = P.work_id
        WHERE
          {IsChecked} AND
          {PriceId} IS NOT NULL AND
          P.price_id = {PriceId} AND
          NOT EXISTS (SELECT * FROM wash.tire_order_work WHERE tire_order_id = {OrderId} AND price_id = {PriceId});
        
        DELETE FROM
          wash.tire_order_work
        WHERE 
          tire_order_id = {OrderId} AND
          price_id = {PriceId} AND
          NOT {IsChecked} AND
          {PriceId} IS NOT NULL;
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderWorkTireTruckInsertOrDeleteSqlQuery">
      <Text>
        INSERT INTO wash.tire_truck_order_work (
          tire_truck_order_id, 
          price_id, 
          quantity, 
          price,
          discount
        )
        SELECT
          {OrderId}, 
          {PriceId}, 
          W.default_quantity, 
          P.price,
          wash.get_discount_value_by_key('cash_work_tire')  
        FROM
          wash.price P
          INNER JOIN wash.work W ON W.work_id = P.work_id
        WHERE
          {IsChecked} AND
          {PriceId} IS NOT NULL AND
          P.price_id = {PriceId} AND
          NOT EXISTS (SELECT * FROM wash.tire_truck_order_work WHERE tire_truck_order_id = {OrderId} AND price_id = {PriceId});
        
        DELETE FROM
          wash.tire_truck_order_work
        WHERE 
          tire_truck_order_id = {OrderId} AND
          price_id = {PriceId} AND
          NOT {IsChecked} AND
          {PriceId} IS NOT NULL;
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderProductInsertOrDeleteSqlQuery">
      <Text>
        INSERT INTO wash.order_product (
          order_id, 
          price_id, 
          quantity, 
          price,
          discount
        )
        SELECT
          {OrderId}, 
          {PriceId}, 
          W.default_quantity, 
          P.price,
          wash.get_discount_value_by_key('cash_product_wash')
        FROM
          wash.price P
          INNER JOIN wash.work W ON W.work_id = P.work_id
        WHERE
          {OrderType} = 'wash' AND
          {IsChecked} AND
          P.price_id = {PriceId} AND
          NOT EXISTS (SELECT * FROM wash.order_product WHERE order_id = {OrderId} AND price_id = {PriceId});
        
        DELETE FROM wash.order_product
        WHERE
          {OrderType} = 'wash' AND
          order_id = {OrderId} AND
          price_id = {PriceId} AND
          NOT {IsChecked};
          
        INSERT INTO wash.tire_order_product (
          tire_order_id, 
          price_id, 
          quantity, 
          price,
          discount
        )
        SELECT
          {OrderId}, 
          {PriceId}, 
          W.default_quantity, 
          P.price,
          wash.get_discount_value_by_key('cash_product_tire')
        FROM
          wash.price P
          INNER JOIN wash.work W ON W.work_id = P.work_id
        WHERE
          {OrderType} = 'tire' AND
          {IsChecked} AND
          P.price_id = {PriceId} AND
          NOT EXISTS (SELECT * FROM wash.tire_order_product WHERE tire_order_id = {OrderId} AND price_id = {PriceId});
        
        DELETE FROM wash.tire_order_work
        WHERE 
          {OrderType} = 'tire' AND
          tire_order_id = {OrderId} AND
          price_id = {PriceId} AND
          NOT {IsChecked};
          
        INSERT INTO wash.tire_truck_order_product (
          tire_truck_order_id, 
          price_id, 
          quantity, 
          price,
          discount
        )
        SELECT
          {OrderId}, 
          {PriceId}, 
          W.default_quantity, 
          P.price,
          wash.get_discount_value_by_key('cash_product_tire')
        FROM
          wash.price P
          INNER JOIN wash.work W ON W.work_id = P.work_id
        WHERE
          {OrderType} = 'tire_truck' AND
          {IsChecked} AND
          P.price_id = {PriceId} AND
          NOT EXISTS (SELECT * FROM wash.tire_truck_order_product WHERE tire_truck_order_id = {OrderId} AND price_id = {PriceId});
        
        DELETE FROM
          wash.tire_truck_order_work
        WHERE 
          {OrderType} = 'tire_truck' AND
          tire_truck_order_id = {OrderId} AND
          price_id = {PriceId} AND
          NOT {IsChecked};
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderOtherWorkInsertSqlQuery">
      <Text>
        INSERT INTO wash.order_other_work(
          order_id, 
          title, 
          price, 
          quantity,
          discount
        )
        SELECT
          {OrderId}, 
          {Title}, 
          {Price}, 
          1,
          wash.get_discount_value_by_key('cash_work_wash')
        WHERE
          {OrderType} = 'wash';
        
        INSERT INTO wash.tire_order_other_work(
          tire_order_id, 
          title, 
          price, 
          quantity,
          discount
        )
        SELECT
          {OrderId}, 
          {Title}, 
          {Price}, 
          1,
          wash.get_discount_value_by_key('cash_work_tire')
        WHERE
          {OrderType} = 'tire';
        
        INSERT INTO wash.tire_truck_order_other_work(
          tire_truck_order_id, 
          title, 
          price, 
          quantity,
          discount
        )
        SELECT
          {OrderId}, 
          {Title}, 
          {Price}, 
          1,
          wash.get_discount_value_by_key('cash_work_tire')
        WHERE
          {OrderType} = 'tire_truck';
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderAnyWorkUpdateSqlQuery">
      <Text>
        UPDATE
          wash.order_work
        SET
          quantity = {Quantity}
        WHERE
          order_work_id = {OrderWorkId}
          AND {Type} = 'work'
          AND {PriceId} != 0;
          
        UPDATE
          wash.order_other_work
        SET
          quantity = {Quantity}
        WHERE
          order_other_work_id = {OrderWorkId}
          AND {Type} = 'work'
          AND {PriceId} = 0;
          
        UPDATE
          wash.order_product
        SET
          quantity = {Quantity}
        WHERE
          order_product_id = {OrderWorkId}
          AND {Type} = 'product';
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireOrderAnyWorkUpdateSqlQuery">
      <Text>
        UPDATE
          wash.tire_order_work
        SET
          quantity = {Quantity}
        WHERE
          tire_order_work_id = {OrderWorkId}
          AND {Type} = 'work'
          AND {PriceId} != 0;
          
        UPDATE
          wash.tire_order_other_work
        SET
          quantity = {Quantity}
        WHERE
          tire_order_other_work_id = {OrderWorkId}
          AND {Type} = 'work'
          AND {PriceId} = 0;
          
        UPDATE
          wash.tire_order_product
        SET
          quantity = {Quantity}
        WHERE
          tire_order_product_id = {OrderWorkId}
          AND {Type} = 'product';
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireTruckOrderAnyWorkUpdateSqlQuery">
      <Text>
        UPDATE
          wash.tire_truck_order_work
        SET
          quantity = {Quantity}
        WHERE
          tire_truck_order_work_id = {OrderWorkId}
          AND {Type} = 'work'
          AND {PriceId} != 0;
          
        UPDATE
          wash.tire_truck_order_other_work
        SET
          quantity = {Quantity}
        WHERE
          tire_truck_order_other_work_id = {OrderWorkId}
          AND {Type} = 'work'
          AND {PriceId} = 0;
          
        UPDATE
          wash.tire_truck_order_product
        SET
          quantity = {Quantity}
        WHERE
          tire_truck_order_product_id = {OrderWorkId}
          AND {Type} = 'product';
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderAnyWorkDeleteSqlQuery">
      <Text>
        DELETE FROM
          wash.order_work
        WHERE
          order_work_id = {OrderWorkId}
          AND {Type} = 'work'
          AND {PriceId} != 0;        
          
        DELETE FROM
          wash.order_other_work
        WHERE
          order_other_work_id = {OrderWorkId}
          AND {Type} = 'work'
          AND {PriceId} = 0;
          
        DELETE FROM
          wash.order_product
        WHERE
          order_product_id = {OrderWorkId}
          AND {Type} = 'product';
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireOrderAnyWorkDeleteSqlQuery">
      <Text>
        DELETE FROM
          wash.tire_order_work
        WHERE
          tire_order_work_id = {OrderWorkId}
          AND {PriceId} != 0;
        
        DELETE FROM
          wash.tire_order_other_work
        WHERE
          tire_order_other_work_id = {OrderWorkId}
          AND {PriceId} = 0;
          
        DELETE FROM
          wash.tire_order_product
        WHERE
          tire_order_product_id = {OrderWorkId}
          AND {Type} = 'product';
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireTruckOrderAnyWorkDeleteSqlQuery">
      <Text>
        DELETE FROM
          wash.tire_truck_order_work
        WHERE
          tire_truck_order_work_id = {OrderWorkId}
          AND {PriceId} != 0;
        
        DELETE FROM
          wash.tire_truck_order_other_work
        WHERE
          tire_truck_order_other_work_id = {OrderWorkId}
          AND {PriceId} = 0;
          
        DELETE FROM
          wash.tire_truck_order_product
        WHERE
          tire_truck_order_product_id = {OrderWorkId}
          AND {Type} = 'product';
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderWorksRecountSqlQuery">
      <Text>
        SELECT wash.refresh_work({OrderId}, {CategoryId}, {ClientId})
      </Text>
    </SqlQuery>

    <SqlQuery Name="PricePassInsertSqlQuery">
      <Text>
        INSERT INTO
          wash.work(title, part_id, work_number, default_quantity, client_id)
        VALUES
         ({Title}, {PartId}, {WorkNumber}, {DefaultQuantity}, {ClientId});
         
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
          (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'pass1'), {Price1});
          
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
          (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'pass2'), {Price2});
          
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
          (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'pass3'), {Price3});
          
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
          (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'pass4'), {Price4});
          
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
          (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'pass5'), {Price5});
          
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
          (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'pass6'), {Price6});
          
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
          (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'pass7'), {Price7});
      </Text>
    </SqlQuery>

    <SqlQuery Name="PricePassCopyInsertSqlQuery">
      <Text>         
        UPDATE
          wash.work
        SET
          deleted = True
        WHERE
          part_id IN (SELECT part_id FROM wash.part WHERE price_type = 'pass')
          AND COALESCE(client_id, 0) = COALESCE({ClientId}, 0);
        
        INSERT INTO
          wash.work(part_id, title, work_number, default_quantity, source_work_id, client_id)
        SELECT
          part_id, title, work_number, default_quantity, work_id, {ClientId}
        FROM
          wash.work
        WHERE
          NOT deleted
          AND COALESCE(client_id, 0) = COALESCE({SourceClientId}, 0)
          AND part_id IN (SELECT part_id FROM wash.part WHERE price_type = 'pass');
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        SELECT
          (SELECT work.work_id FROM wash.work WHERE P.work_id = work.source_work_id AND work.client_id = {ClientId} AND NOT deleted),
          P.category_id,
          P.price
        FROM
          wash.price P
          LEFT JOIN wash.work W ON P.work_id = W.work_id
        WHERE
          NOT W.deleted
          AND COALESCE(client_id, 0) = COALESCE({SourceClientId}, 0)
          AND part_id IN (SELECT part_id FROM wash.part WHERE price_type = 'pass');
      </Text>
    </SqlQuery>

    <SqlQuery Name="PricePassUpdateSqlQuery">
      <Text>
        UPDATE
          wash.work
        SET
          title = {Title},
          work_number = {WorkNumber},
          default_quantity = {DefaultQuantity}
        WHERE
          work_id = {WorkId}
          AND COALESCE(client_id, 0) = COALESCE({ClientId}, 0);
          
        UPDATE
          wash.price
        SET
          price = {Price1}
        WHERE
          price_id = {PriceId1};
          
        UPDATE
          wash.price
        SET
          price = {Price2}
        WHERE
          price_id = {PriceId2};
          
        UPDATE
          wash.price
        SET
          price = {Price3}
        WHERE
          price_id = {PriceId3};
          
        UPDATE
          wash.price
        SET
          price = {Price4}
        WHERE
          price_id = {PriceId4};
          
        UPDATE
          wash.price
        SET
          price = {Price5}
        WHERE
          price_id = {PriceId5};
          
        UPDATE
          wash.price
        SET
          price = {Price6}
        WHERE
          price_id = {PriceId6};
          
        UPDATE
          wash.price
        SET
          price = {Price7}
        WHERE
          price_id = {PriceId7};
      </Text>
    </SqlQuery>

    <SqlQuery Name="PricePassFakeDeleteSqlQuery">
      <Text>
        UPDATE
          wash.work
        SET
          deleted = True
        WHERE
          part_id IN(SELECT part_id FROM wash.part WHERE price_type = 'pass')
          AND client_id = {ClientId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceTruckInsertSqlQuery">
      <Text>
        INSERT INTO
          wash.work(title, part_id, work_number, default_quantity, client_id)
        VALUES
          ({Title}, {PartId}, {WorkNumber}, {DefaultQuantity}, {ClientId});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
          (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'truck'), {Price});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
          (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'truck_spec'), {PriceSpec});
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceTruckCopyInsertSqlQuery">
      <Text>
        UPDATE
          wash.work
        SET
          deleted = True
        WHERE
          part_id IN (SELECT part_id FROM wash.part WHERE price_type = 'truck')
          AND COALESCE(client_id, 0) = COALESCE({ClientId}, 0);
        
        INSERT INTO
          wash.work(part_id, title, work_number, default_quantity, source_work_id, client_id)
        SELECT
          part_id, title, work_number, default_quantity, work_id, {ClientId}
        FROM
          wash.work
        WHERE
          NOT deleted
          AND COALESCE(client_id, 0) = COALESCE({SourceClientId}, 0)
          AND part_id IN (SELECT part_id FROM wash.part WHERE price_type = 'truck');
          
        INSERT INTO
          wash.price(work_id, category_id, price)
        SELECT
          (SELECT work.work_id FROM wash.work WHERE P.work_id = work.source_work_id AND work.client_id = {ClientId} AND NOT deleted),
          P.category_id,
          P.price
        FROM
          wash.price P
          LEFT JOIN wash.work W ON P.work_id = W.work_id
        WHERE
          NOT W.deleted
          AND COALESCE(client_id, 0) = COALESCE({SourceClientId}, 0)
          AND part_id IN (SELECT part_id FROM wash.part WHERE price_type = 'truck');
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceTruckUpdateSqlQuery">
      <Text>
        UPDATE
          wash.work
        SET
          title = {Title},
          work_number = {WorkNumber},
          default_quantity = {DefaultQuantity}
        WHERE
          work_id = {WorkId}
          AND COALESCE(client_id, 0) = COALESCE({ClientId}, 0);
        
        UPDATE
          wash.price
        SET
          price = {Price}
        WHERE
          price_id = {PriceId};
        
        UPDATE
          wash.price
        SET
          price = {PriceSpec}
        WHERE
          price_id = {PriceIdSpec};
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceTruckFakeDeleteSqlQuery">
      <Text>
        UPDATE
          wash.work
        SET
          deleted = True
        WHERE
          part_id IN (SELECT part_id FROM wash.part WHERE price_type = 'truck')
          AND client_id = {ClientId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceTireInsertSqlQuery">
      <Text>
        INSERT INTO
          wash.work(title, part_id, work_number, default_quantity)
        VALUES
          ({Title}, (SELECT part_id FROM wash.part WHERE price_type = 'tire'), {WorkNumber}, {DefaultQuantity});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
          (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire1'), {Price1});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire2'), {Price2});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire3'), {Price3});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire4'), {Price4});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire5'), {Price5});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire6'), {Price6});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire7'), {Price7});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire8'), {Price8});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire9'), {Price9});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire10'), {Price10});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire11'), {Price11});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire12'), {Price12});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire13'), {Price13});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire14'), {Price14});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'tire15'), {Price15});
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceTireTruckInsertSqlQuery">
      <Text>
        INSERT INTO
          wash.work(title, part_id, work_number, default_quantity)
        VALUES
          ({Title}, (SELECT part_id FROM wash.part WHERE price_type = 'tire_truck'), {WorkNumber}, {DefaultQuantity});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
          (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck1'), {Price1});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck2'), {Price2});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck3'), {Price3});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck4'), {Price4});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck5'), {Price5});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck6'), {Price6});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck7'), {Price7});
        
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck8'), {Price8});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck9'), {Price9});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck10'), {Price10});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck11'), {Price11});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck12'), {Price12});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck13'), {Price13});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck14'), {Price14});
        
        INSERT INTO
        wash.price(work_id, category_id, price)
        VALUES
        (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 't_truck15'), {Price15});
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceTireUpdateSqlQuery">
      <Text>
        UPDATE
          wash.work
        SET
          title = {Title},
          work_number = {WorkNumber},
          default_quantity = {DefaultQuantity}
        WHERE
          work_id = {WorkId};
        
        UPDATE
          wash.price
        SET
          price = {Price1}
        WHERE
          price_id = {PriceId1};
        
        UPDATE
          wash.price
        SET
          price = {Price2}
        WHERE
          price_id = {PriceId2};
        
        UPDATE
          wash.price
        SET
          price = {Price3}
        WHERE
          price_id = {PriceId3};
        
        UPDATE
          wash.price
        SET
          price = {Price4}
        WHERE
          price_id = {PriceId4};
        
        UPDATE
          wash.price
        SET
          price = {Price5}
        WHERE
          price_id = {PriceId5};
        
        UPDATE
          wash.price
        SET
          price = {Price6}
        WHERE
          price_id = {PriceId6};
        
        UPDATE
          wash.price
        SET
          price = {Price7}
        WHERE
          price_id = {PriceId7};
        
        UPDATE
          wash.price
        SET
          price = {Price8}
        WHERE
          price_id = {PriceId8};
          
        
        UPDATE
          wash.price
        SET
          price = {Price9}
        WHERE
          price_id = {PriceId9};
        
        UPDATE
          wash.price
        SET
          price = {Price10}
        WHERE
          price_id = {PriceId10};
        
        UPDATE
          wash.price
        SET
          price = {Price11}
        WHERE
          price_id = {PriceId11};
        
        UPDATE
          wash.price
        SET
          price = {Price12}
        WHERE
          price_id = {PriceId12};
        
        UPDATE
          wash.price
        SET
          price = {Price13}
        WHERE
          price_id = {PriceId13};
        
        UPDATE
          wash.price
        SET
          price = {Price14}
        WHERE
          price_id = {PriceId14};
        
        UPDATE
          wash.price
        SET
          price = {Price15}
        WHERE
          price_id = {PriceId15};
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceProductInsertSqlQuery">
      <Text>
        INSERT INTO
          wash.work(title, part_id, work_number, default_quantity)
        VALUES
          ({Title}, {PartId}, {WorkNumber}, {DefaultQuantity});
          
        INSERT INTO
          wash.price(work_id, category_id, price)
        VALUES
          (CURRVAL('wash.work_id_seq'::regclass), (SELECT category_id FROM wash.category WHERE category_key = 'product'), {Price});
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceProductUpdateSqlQuery">
      <Text>
        UPDATE
          wash.work
        SET
          title = {Title},
          work_number = {WorkNumber},
          default_quantity = {DefaultQuantity}
        WHERE
          work_id = {WorkId};
        
        UPDATE
          wash.price
        SET
          price = {Price}
        WHERE
          price_id = {PriceId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="PriceFakeDeleteSqlQuery">
      <Text>
        UPDATE
          wash.work
        SET
          deleted = True
        WHERE
          work_id = {WorkId}
          AND COALESCE({ClientId}, 0) = COALESCE(client_id, 0)
      </Text>
    </SqlQuery>

    <SqlQuery Name="PartInsertSqlQuery">
      <Text>
        INSERT INTO
          wash.part(part_number, title, price_type)
        VALUES
          ({PartNumber}, {Title}, {PriceType})
      </Text>
    </SqlQuery>

    <SqlQuery Name="PartUpdateSqlQuery">
      <Text>
        UPDATE
          wash.part
        SET
          part_number = {PartNumber},
          title = {Title},
          price_type = {PriceType}
        WHERE
          part_id = {PartId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="PartDeleteSqlQuery">
      <Text>
        DELETE FROM wash.part
        WHERE
          part_id = {PartId};
      </Text>
    </SqlQuery>


    <!-- - - - - - - - - VIEW SETTINGS - - - - - - - - -->
    <SqlQuery Name="SettingSelectSqlQuery">
      <Text>
        SELECT
          setting_id AS "SettingId",
          title AS "Title",
          setting_key AS "SettingKey",
          setting_value AS "SettingValue"
        FROM
          wash.setting
        ORDER BY
          title DESC;
      </Text>
    </SqlQuery>

    <!-- - - - - - - - - EDIT SETTINGS - - - - - - - - -->
    <SqlQuery Name="SettingUpdateSqlQuery">
      <Text>
        UPDATE wash.setting
        SET
          setting_value = {SettingValue}
        WHERE
          setting_id = {SettingId};
      </Text>
    </SqlQuery>


    <!-- - - - - - - - - VIEW CATEGORY SETTINGS - - - - - - - - -->
    <SqlQuery Name="CategoryDescriptionSelectSqlQuery">
      <Text>
        SELECT
          category_id AS "CategoryId",
          title AS "Title",
          description AS "Description"
        FROM
          wash.category
        WHERE
          category_key LIKE 'pass%'
        ORDER BY
          title;
      </Text>
    </SqlQuery>

    <SqlQuery Name="CategoryDescriptionPrintableSelectSqlQuery">
      <Text>
        SELECT
          (SELECT description FROM wash.category WHERE category_key = 'pass1') AS "Description1",
          (SELECT description FROM wash.category WHERE category_key = 'pass2') AS "Description2",
          (SELECT description FROM wash.category WHERE category_key = 'pass3') AS "Description3",
          (SELECT description FROM wash.category WHERE category_key = 'pass4') AS "Description4",
          (SELECT description FROM wash.category WHERE category_key = 'pass5') AS "Description5",
          (SELECT description FROM wash.category WHERE category_key = 'pass6') AS "Description6",
          (SELECT description FROM wash.category WHERE category_key = 'pass7') AS "Description7"
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireCategorySelectSqlQuery">
      <Text>
        SELECT
          category_id AS "CategoryId",
          title AS "Title",
          visible AS "Visible",
          replace(category_key, 'tire', '')::int AS Sort
        FROM
          wash.category
        WHERE
          category_key LIKE 'tire%'
        ORDER BY
          Sort;
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireTruckCategorySelectSqlQuery">
      <Text>
        SELECT
          category_id AS "CategoryId",
          title AS "Title",
          visible AS "Visible",
          replace(category_key, 't_truck', '')::int AS Sort
        FROM
          wash.category
        WHERE
          category_key LIKE 't_truck%'
        ORDER BY
          Sort;
      </Text>
    </SqlQuery>

    <!-- - - - - - - - - EDIT CATEGORY SETTINGS - - - - - - - - -->
    <SqlQuery Name="CategoryDescriptionUpdateSqlQuery">
      <Text>
        UPDATE
          wash.category
        SET
          description = {Description}
        WHERE
          category_id = {CategoryId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="TireCategoryUpdateSqlQuery">
      <Text>
        UPDATE
          wash.category
        SET
          title = {Title},
          visible = {Visible}
        WHERE
          category_id = {CategoryId}
      </Text>
    </SqlQuery>

    <!-- - - - - - - - - VIEW EMAIL SETTINGS - - - - - - - - -->
    <SqlQuery Name="EmailSettingSelectSqlQuery">
      <Text>
        SELECT
          email_setting_id AS "EmailSettingId",
          email_setting_name AS "EmailSettingName",
          author_smtp_server_address AS "AuthorSmtpServerAddress",
          author_smtp_server_port AS "AuthorSmtpServerPort",
          author_email_address AS "AuthorEmailAddress",
          author_email_password AS "AuthorEmailPassword",
          author_name AS "AuthorName",
          subject AS "Subject",
          text AS "Text"
        FROM
          wash.email_setting
        WHERE
          email_setting_name = 'ShiftReport'
      </Text>
    </SqlQuery>

    <SqlQuery Name="EmailAddresseeSelectSqlQuery">
      <Text>
        SELECT
        email_addressee.email_addressee_id AS "EmailAddresseeId",
        email_addressee.email_address AS "EmailAddress"
        FROM
        wash.email_addressee
        INNER JOIN
        wash.email_setting
        ON
        email_setting.email_setting_id = email_addressee.email_setting_id
        WHERE
        email_setting.email_setting_name = 'ShiftReport'
        ORDER BY
        email_addressee.email_addressee_id
      </Text>
    </SqlQuery>

    <SqlQuery Name="EmailSendSettingSelectSqlQuery">
      <Text>
        SELECT
        email_send_setting_id AS "EmailSendSettingId",
        server_address AS "ServerAddress",
        server_port AS "ServerPort",
        email_address AS "EmailAddress",
        email_password AS "EmailPassword",
        subject AS "Subject",
        header AS "Header",
        text AS "Text"
        FROM
        wash.email_send_setting
      </Text>
    </SqlQuery>



    <!-- - - - - - - - - EDIT EMAIL SETTINGS - - - - - - - - -->
    <SqlQuery Name="EmailSettingUpdateSqlQuery">
      <Text>
        UPDATE
          wash.email_setting
        SET
          author_smtp_server_address = {AuthorSmtpServerAddress},
          author_smtp_server_port = {AuthorSmtpServerPort},
          author_email_address = {AuthorEmailAddress},
          author_email_password = {AuthorEmailPassword},
          author_name = {AuthorName},
          subject = {Subject},
          text = {Text}
        WHERE
          email_setting_name = {EmailSettingName}
      </Text>
    </SqlQuery>

    <SqlQuery Name="EmailAddresseeUpdateSqlQuery">
      <Text>
        UPDATE
        wash.email_addressee
        SET
        email_address = {EmailAddress}
        WHERE
        email_addressee_id = {EmailAddresseeId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="EmailSendSettingUpdateSqlQuery">
      <Text>
        UPDATE
        wash.email_send_setting
        SET
        server_address = {ServerAddress},
        server_port = {ServerPort},
        email_address = {EmailAddress},
        email_password = {EmailPassword},
        subject = {Subject},
        header = {Header},
        text = {Text}
        WHERE
        email_send_setting_id = {EmailSendSettingId}
      </Text>
    </SqlQuery>



    <!-- - - - - - - - - VIEW MONEY TRANSACTIONS - - - - - - - - -->
    <SqlQuery Name="CashSelectSqlQuery">
      <Text>
        SELECT
          Id AS "CashId",
          Date AS "CashTime",
          Date AS "CashDateTime",
          CashType AS "CashType",
          Summ AS "Summ",
          Comments AS "Comments"
        FROM(
          SELECT 
            deposit_id AS Id,
            deposit_date AS Date,
            (SELECT title FROM wash.deposit_type WHERE deposit_type_id = D.deposit_type_id) AS CashType,
            summ AS Summ,
            comments AS Comments,
            shift_id,
            'deposit' AS Type
          FROM
            wash.deposit D
          UNION
          SELECT 
            withdrawal_id,
            withdrawal_date,
            (SELECT title FROM wash.withdrawal_type WHERE withdrawal_type_id = W.withdrawal_type_id),
            summ,
            comments,
            shift_id,
            'withdrawal'
          FROM
            wash.withdrawal W
        ) tmp
        WHERE
          (({IsArchive} AND Date::date BETWEEN {StartDate}::date AND {EndDate}::Date)
          OR (NOT {IsArchive} AND shift_id = {ShiftId}))
          AND Type = {Type}
        ORDER BY
          Date;
      </Text>
    </SqlQuery>

    <SqlQuery Name="CashItemSelectSqlQuery">
      <Text>
        SELECT
          Id AS "CashId",
          Date AS "CashDate",
          TypeId AS "CashTypeId",
          Summ AS "Summ",
          Comments AS "Comments"
        FROM(
          SELECT 
            deposit_id AS Id,
            deposit_date AS Date,
            deposit_type_id AS TypeId,
            summ AS Summ,
            comments AS Comments,
            'deposit' AS Type
          FROM
            wash.deposit
          UNION
          SELECT 
            withdrawal_id,
            withdrawal_date,
            withdrawal_type_id,
            summ,
            comments,
            'withdrawal'
          FROM
            wash.withdrawal
          ) tmp
        WHERE
          Id = {CashId}
          AND Type = {Type};
      </Text>
    </SqlQuery>

    <SqlQuery Name="CashTypeSelectSqlQuery">
      <Text>
        SELECT
          TypeId AS "CashTypeId",
          Title AS "Title",
          Deleted AS "Deleted",
          Type AS "Type",
          CASE WHEN (Type = 'withdrawal' AND TypeId <![CDATA[<]]> 4) THEN False ELSE True END AS "AllowDelete"
        FROM(
          SELECT 
            deposit_type_id AS TypeId,
            title AS Title,
            deleted AS Deleted,
            'deposit' AS Type
          FROM
            wash.deposit_type D
          UNION
          SELECT 
            withdrawal_type_id,
            title,
            deleted,
            'withdrawal'
          FROM
            wash.withdrawal_type W
        ) tmp
        ORDER BY
          Title
      </Text>
    </SqlQuery>

    <!-- - - - - - - - - EDIT MONEY TRANSACTIONS - - - - - - - - -->
    <SqlQuery Name="CashDivideUpdateSqlQuery">
      <Text>
        UPDATE 
          wash.deposit
        SET
          summ = summ - {Summ}
        WHERE
          deposit_id = {CashId}
          AND {Type} = 'deposit';
        
        INSERT INTO
          wash.deposit(shift_id, deposit_date, deposit_type_id, summ, comments)
        SELECT
          (SELECT shift_id FROM wash.deposit WHERE deposit_id = {CashId}),
          (SELECT deposit_date FROM wash.deposit WHERE deposit_id = {CashId}),
          {CashTypeId},
          {Summ},
          {Comments}
        WHERE
          {Type} = 'deposit';
        
        UPDATE 
          wash.withdrawal
        SET
          summ = summ - {Summ}
        WHERE
          withdrawal_id = {CashId}
          AND {Type} = 'withdrawal';
        
        INSERT INTO
          wash.withdrawal(shift_id, withdrawal_date, withdrawal_type_id, summ, comments)
        SELECT
          (SELECT shift_id FROM wash.withdrawal WHERE withdrawal_id = {CashId}),
          (SELECT withdrawal_date FROM wash.withdrawal WHERE withdrawal_id = {CashId}),
          {CashTypeId},
          {Summ},
          {Comments}
        WHERE
          {Type} = 'withdrawal';
      </Text>
    </SqlQuery>

    <SqlQuery Name="CashTypeInsertSqlQuery">
      <Text>
        INSERT INTO
          wash.deposit_type(title)
        SELECT
          {Title}
        WHERE
          {Type} = 'deposit';
          
        INSERT INTO
          wash.withdrawal_type(title)
        SELECT
          {Title}
        WHERE
          {Type} = 'withdrawal';
      </Text>
    </SqlQuery>

    <SqlQuery Name="CashTypeUpdateSqlQuery">
      <Text>
        UPDATE
          wash.deposit_type
        SET
          title = {Title}
        WHERE
          deposit_type_id = {CashTypeId}
          AND {Type} = 'deposit';
          
        UPDATE
          wash.withdrawal_type
        SET
          title = {Title}
        WHERE
          withdrawal_type_id = {CashTypeId}
          AND {Type} = 'withdrawal';
      </Text>
    </SqlQuery>

    <SqlQuery Name="CashTypeFakeDeleteSqlQuery">
      <Text>
        UPDATE
          wash.deposit_type
        SET
          deleted = True
        WHERE
          deposit_type_id = {CashTypeId}
          AND {Type} = 'deposit';
        
        UPDATE
          wash.withdrawal_type
        SET
          deleted = True
        WHERE
          withdrawal_type_id = {CashTypeId}
          AND {Type} = 'withdrawal';
      </Text>
    </SqlQuery>

    <SqlQuery Name="CashInsertSqlQuery">
      <Text>
        INSERT INTO
          wash.deposit(deposit_date, deposit_type_id, summ, comments, shift_id)
        SELECT
          now(), {CashTypeId}, {Summ}, {Comments}, {ShiftId}
        WHERE
          {Type} = 'deposit';
        
        INSERT INTO
          wash.withdrawal(withdrawal_date, withdrawal_type_id, summ, comments, shift_id)
        SELECT
          now(), {CashTypeId}, {Summ}, {Comments}, {ShiftId}
        WHERE
          {Type} = 'withdrawal';
      </Text>
    </SqlQuery>

    <SqlQuery Name="CashUpdateSqlQuery">
      <Text>
        UPDATE
          wash.deposit
        SET
          deposit_type_id = {CashTypeId},
          summ = {Summ}, 
          comments = {Comments}
        WHERE
          deposit_id = {CashId}
          AND {Type} = 'deposit';
        
        UPDATE
          wash.withdrawal
        SET
          withdrawal_type_id = {CashTypeId},
          summ = {Summ}, 
          comments = {Comments}
        WHERE
          withdrawal_id = {CashId}
          AND {Type} = 'withdrawal';
      </Text>
    </SqlQuery>

    <SqlQuery Name="CashDeleteSqlQuery">
      <Text>
        DELETE FROM
          wash.deposit
        WHERE
          deposit_id = {CashId}
          AND {Type} = 'deposit';
        
        DELETE FROM
          wash.withdrawal
        WHERE
          withdrawal_id = {CashId}
          AND {Type} = 'withdrawal';
      </Text>
    </SqlQuery>


    <!-- - - - - - - - - VIEW ADMINS- - - - - - - - -->
    <SqlQuery Name="WashAdminSelectSqlQuery">
      <Text>
        SELECT
          admin_id AS "WashAdminId",
          title AS "Title"
        FROM
          wash.admin
        WHERE
          NOT deleted
        ORDER BY
          title
      </Text>
    </SqlQuery>

    <!-- - - - - - - - - EDIT ADMINS- - - - - - - - -->
    <SqlQuery Name="WashAdminInsertSqlQuery">
      <Text>
        INSERT INTO
          wash.admin(title)
        VALUES
          ({Title})
      </Text>
    </SqlQuery>

    <SqlQuery Name="WashAdminUpdateSqlQuery">
      <Text>
        UPDATE
          wash.admin
        SET
          title = {Title}
        WHERE
          admin_id = {WashAdminId}
      </Text>
    </SqlQuery>

    <SqlQuery Name="WashAdminFakeDeleteSqlQuery">
      <Text>
        UPDATE
          wash.admin
        SET
          deleted = True
        WHERE
          admin_id = {WashAdminId}
      </Text>
    </SqlQuery>


    <!-- - - - - - - - - VIEW SHIFTS- - - - - - - - -->
    <SqlQuery Name="ShiftSelectSqlQuery">
      <Text>
        SELECT
          shift_id AS "ShiftId",
          admin_id AS "WashAdminId",
          (SELECT title FROM wash.admin WHERE admin_id = S.admin_id) || ' ('
            || to_char(S.start_time, 'HH24:MI') || ' – ' 
            || COALESCE(to_char(S.end_time, 'HH24:MI')::character varying, '...') || ')' AS "Title"
        FROM
          wash.shift S
        WHERE
          start_time::date = {ShiftDate}::date
        ORDER BY
          S.start_time
      </Text>
    </SqlQuery>

    <SqlQuery Name="ShiftItemSelectSqlQuery">
      <Text>
        SELECT
          S.shift_id AS "ShiftId",
          S.admin_id AS "WashAdminId",
          (SELECT title FROM wash.admin WHERE admin_id = S.admin_id) || ' ('
            || to_char(S.start_time, 'HH24:MI') || ' – ' 
            || COALESCE(to_char(S.end_time, 'HH24:MI')::character varying, '...') || ')' AS "Title",
          S.start_time AS "StartTime",
          S.end_time AS "EndTime"
        FROM
          wash.shift S
        WHERE
          S.shift_id = {ShiftId}
          OR shift_id IN (SELECT shift_id FROM wash.shift WHERE start_time::date = (SELECT start_time::date FROM wash.shift WHERE shift_id = {ShiftId}) OR start_time::date = (SELECT start_time::date FROM wash.shift WHERE shift_id = {ShiftId}) - 1)
        ORDER BY 
          S.start_time
      </Text>
    </SqlQuery>

    <SqlQuery Name="ShiftCurrentSelectSqlQuery">
      <Text>
        SELECT
          S.shift_id AS "ShiftId",
          (SELECT title FROM wash.admin WHERE admin_id = S.admin_id) AS "WashAdmin"
        FROM
          wash.shift S
        WHERE
          S.shift_id = (SELECT MAX(shift_id) FROM wash.shift)
          AND S.end_time ISNULL;
      </Text>
    </SqlQuery>

    <!-- - - - - - - - - EDIT SHIFTS- - - - - - - - -->
    <SqlQuery Name="ShiftInsertSqlQuery">
      <Text>
        INSERT INTO
          wash.shift(admin_id, start_time)
        SELECT
          {WashAdminId}, {StartTime}
        WHERE
          {WashAdminId} IS NOT NULL
        RETURNING
          shift_id AS "ShiftId";
      </Text>
    </SqlQuery>

    <SqlQuery Name="ShiftUpdateSqlQuery">
      <Text>
        UPDATE
          wash.shift
        SET
          end_time = {EndTime},
          rest_summ = {RestSumm},
          wash_salary = wash.count_salary({ShiftId}, 'wash'),
          tire_salary = wash.count_salary({ShiftId}, 'tire'),
          tire_truck_salary = wash.count_salary({ShiftId}, 'tire_truck')
        WHERE
          shift_id = {ShiftId}
      </Text>
    </SqlQuery>


    <!-- - - - - - - - - VIEW REPORTS- - - - - - - - -->
    <SqlQuery Name="ReportSelectSqlQuery">
      <Text>
        WITH shifts AS (SELECT {ShiftId}::integer)
        SELECT
        (SELECT COALESCE(SUM(cash), 0) FROM wash.order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        + (SELECT COALESCE(SUM(cash), 0) FROM wash.tire_order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        + (SELECT COALESCE(SUM(cash), 0) FROM wash.tire_truck_order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        AS "CashRevenue",
        (SELECT COALESCE(SUM(terminal), 0) FROM wash.order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        + (SELECT COALESCE(SUM(terminal), 0) FROM wash.tire_order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        + (SELECT COALESCE(SUM(terminal), 0) FROM wash.tire_truck_order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        AS "TerminalRevenue",
        (SELECT COALESCE(SUM(non_cash), 0) FROM wash.order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        + (SELECT COALESCE(SUM(non_cash), 0) FROM wash.tire_order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        + (SELECT COALESCE(SUM(non_cash), 0) FROM wash.tire_truck_order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        AS "NonCashRevenue",
        (SELECT COALESCE(SUM(cash), 0) FROM wash.order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        + (SELECT COALESCE(SUM(cash), 0) FROM wash.tire_order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        + (SELECT COALESCE(SUM(cash), 0) FROM wash.tire_truck_order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        + (SELECT COALESCE(SUM(summ), 0) FROM wash.deposit WHERE shift_id = (SELECT * FROM shifts))
        - (SELECT COALESCE(SUM(summ), 0) FROM wash.withdrawal WHERE shift_id = (SELECT * FROM shifts))
        + (SELECT COALESCE(rest_summ, 0) FROM wash.shift ORDER BY shift_id DESC LIMIT 1 OFFSET 1)
        AS "CurrentCash",
        (SELECT COALESCE(SUM(cash), 0) FROM wash.order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        + (SELECT COALESCE(SUM(cash), 0) FROM wash.tire_order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        + (SELECT COALESCE(SUM(cash), 0) FROM wash.tire_truck_order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        + (SELECT COALESCE(SUM(summ), 0) FROM wash.deposit WHERE shift_id = (SELECT * FROM shifts))
        - (SELECT COALESCE(SUM(summ), 0) FROM wash.withdrawal WHERE shift_id = (SELECT * FROM shifts))
        + (SELECT COALESCE(rest_summ, 0) FROM wash.shift ORDER BY shift_id DESC LIMIT 1 OFFSET 1)
        - wash.count_salary((SELECT * FROM shifts), 'wash')
        - wash.count_salary((SELECT * FROM shifts), 'tire')
        - wash.count_salary((SELECT * FROM shifts), 'tire_truck')
        AS "Rest"
      </Text>
    </SqlQuery>

    <SqlQuery Name="ReportShiftSelectSqlQuery">
      <Text>
        UPDATE 
        wash.shift
        SET 
        wash_salary = wash.count_salary((SELECT MAX(shift_id) FROM wash.shift), 'wash'),
        tire_salary = wash.count_salary((SELECT MAX(shift_id) FROM wash.shift), 'tire'),
        tire_truck_salary = wash.count_salary((SELECT MAX(shift_id) FROM wash.shift), 'tire_truck')
        WHERE
        shift_id = (SELECT MAX(shift_id) FROM wash.shift);
        
        WITH shifts AS (SELECT {ShiftId}::integer)
        SELECT
        (SELECT start_time FROM wash.shift WHERE shift_id = (SELECT * FROM shifts)) AS "ShiftDate",
        Rest AS "StartRest",
        Income - Outcome AS "CashRest",
        CASE WHEN Income != 0 OR Outcome != 0 THEN '[' || Income || ' – ' || Outcome || ']' END AS "CashRestExplain",
        -Collection AS "Collection",
        Rest + Income - Outcome - Collection AS "EndRest",
        CASE WHEN Income != 0 OR Outcome != 0 OR Collection != 0 THEN '[' || Rest || ' + ' || Income || ' – ' || Outcome || ' – ' || Collection || ']' END AS "EndRestExplain"
        FROM 
        (
        SELECT
        (SELECT COALESCE(SUM(cash), 0) FROM wash.order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted) 
        + (SELECT COALESCE(SUM(cash), 0) FROM wash.tire_order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted)
        + (SELECT COALESCE(SUM(cash), 0) FROM wash.tire_truck_order_list WHERE shift_id = (SELECT * FROM shifts) AND NOT deleted) 
        + (SELECT COALESCE(SUM(summ), 0) FROM wash.deposit WHERE shift_id = (SELECT * FROM shifts)) AS Income,
        (SELECT COALESCE(SUM(summ), 0) FROM wash.withdrawal WHERE shift_id = (SELECT * FROM shifts) AND withdrawal_type_id != 1)
        + COALESCE((SELECT wash_salary + tire_salary + tire_truck_salary FROM wash.shift WHERE shift_id = (SELECT * FROM shifts)), 0) AS Outcome,
        (SELECT COALESCE(SUM(summ), 0) FROM wash.withdrawal WHERE shift_id = (SELECT * FROM shifts) AND withdrawal_type_id = 1) AS Collection,
        COALESCE((SELECT rest_summ FROM wash.shift WHERE shift_id <![CDATA[<]]> (SELECT * FROM shifts) ORDER BY shift_id DESC LIMIT 1), 0) AS Rest
        ) tmp
      </Text>
    </SqlQuery>

    <SqlQuery Name="ReportPeriodSelectSqlQuery">
      <Text>
        UPDATE 
        wash.shift
        SET 
        wash_salary = wash.count_salary((SELECT MAX(shift_id) FROM wash.shift), 'wash'),
        tire_salary = wash.count_salary((SELECT MAX(shift_id) FROM wash.shift), 'tire'),
        tire_truck_salary = wash.count_salary((SELECT MAX(shift_id) FROM wash.shift), 'tire_truck')
        WHERE
        shift_id = (SELECT MAX(shift_id) FROM wash.shift);
        
        WITH shifts AS (SELECT shift_id FROM (SELECT shift_id FROM wash.shift WHERE start_time::date >= {StartDate}::date AND start_time::date <![CDATA[<=]]> {EndDate}::date) x)
        SELECT
        {StartDate} AS "StartDate",
        {EndDate} AS "EndDate",
        Income - Outcome AS "CashRest",
        CASE WHEN Income != 0 OR Outcome != 0 THEN '[' || Income || ' – ' || Outcome || ']' END AS "CashRestExplain",
        -Collection AS "Collection"
        FROM 
        (
        SELECT
        (SELECT COALESCE(SUM(cash), 0) FROM wash.order_list WHERE shift_id IN (SELECT * FROM shifts) AND NOT deleted) 
        + (SELECT COALESCE(SUM(cash), 0) FROM wash.tire_order_list WHERE shift_id IN (SELECT * FROM shifts) AND NOT deleted) 
        + (SELECT COALESCE(SUM(cash), 0) FROM wash.tire_truck_order_list WHERE shift_id IN (SELECT * FROM shifts) AND NOT deleted) 
        + (SELECT COALESCE(SUM(summ), 0) FROM wash.deposit WHERE shift_id IN (SELECT * FROM shifts)) AS Income,
        (SELECT COALESCE(SUM(summ), 0) FROM wash.withdrawal WHERE shift_id IN (SELECT * FROM shifts) AND withdrawal_type_id != 1)
        + (SELECT COALESCE(SUM(wash_salary), 0) + COALESCE(SUM(tire_salary), 0) + COALESCE(SUM(tire_truck_salary), 0) FROM wash.shift WHERE shift_id IN (SELECT * FROM shifts)) AS Outcome,
        (SELECT COALESCE(SUM(summ), 0) FROM wash.withdrawal WHERE shift_id IN (SELECT * FROM shifts) AND withdrawal_type_id = 1) AS Collection
        ) tmp
      </Text>
    </SqlQuery>

    <SqlQuery Name="ReportHistorySelectSqlQuery">
      <Text>
		SELECT
		  order_date AS "OrderDate",
		  CASE WHEN cash = 0 THEN NULL ELSE cash END AS "Cash",
		  CASE WHEN non_cash = 0 THEN NULL ELSE non_cash END  AS "NonCash",
		  CASE WHEN terminal = 0 THEN NULL ELSE terminal END AS "Terminal",
		  CASE WHEN discount_percent = 0 THEN NULL ELSE discount_percent || '%' END AS "DiscountPercent",
		  order_number AS "OrderNumber",
		  order_id AS "OrderId",
		  order_type AS "OrderType",
		  type AS "Type"
		FROM(
		  SELECT
		    order_date,
		    cash,
		    non_cash,
		    terminal,
		    CASE 
		      WHEN 
		        is_person AND
		        COALESCE(cash, 0) > 0 AND 
		        COALESCE(non_cash, 0) = 0 AND 
		        COALESCE(terminal, 0) = 0  AND 
		        (COALESCE(cash, 0) + COALESCE(non_cash, 0) + COALESCE(terminal, 0) + COALESCE(discount, 0))::numeric > 0
		      THEN 
		        round(COALESCE(discount, 0)::numeric / (COALESCE(cash, 0) + COALESCE(non_cash, 0) + COALESCE(terminal, 0) + COALESCE(discount, 0))::numeric * 100, 1)
		      ELSE 
		        discount_percent
		    END  discount_percent,
		    order_number,
		    shift_id,
		    order_id AS order_id,
		    'wash' AS order_type,
		    'Автомойка' || ' (' || CV.title || ' ' || COALESCE(CM.title, '') || ')' AS type
		  FROM
		    wash.order_list OL
		    INNER JOIN wash.car C ON C.car_id = OL.car_id
		    INNER JOIN wash.car_model CM ON CM.car_model_id = C.car_model_id
		    INNER JOIN wash.car_vendor CV ON CV.car_vendor_id = CM.car_vendor_id
		  WHERE
		    NOT OL.deleted
		
		  UNION ALL
		
		  SELECT
		    order_date,
		    cash,
		    non_cash,
		    terminal,
		    CASE 
		      WHEN 
		        is_person AND
		        COALESCE(cash, 0) > 0 AND 
		        COALESCE(non_cash, 0) = 0 AND 
		        COALESCE(terminal, 0) = 0  AND 
		        (COALESCE(cash, 0) + COALESCE(non_cash, 0) + COALESCE(terminal, 0) + COALESCE(discount, 0))::numeric > 0
		      THEN 
		        round(COALESCE(discount, 0)::numeric / (COALESCE(cash, 0) + COALESCE(non_cash, 0) + COALESCE(terminal, 0) + COALESCE(discount, 0))::numeric * 100, 1)
		      ELSE 
		        0
		    END  discount_percent,
		    order_number,
		    shift_id,
		    tire_order_id,
		    'tire',
		    'Легковой шиномонтаж' || ' (' || CV.title || ' ' || COALESCE(CM.title, '') || ')'
		  FROM
		    wash.tire_order_list TOL
		    INNER JOIN wash.car C ON C.car_id = TOL.car_id
		    INNER JOIN wash.car_model CM ON CM.car_model_id = C.car_model_id
		    INNER JOIN wash.car_vendor CV ON CV.car_vendor_id = CM.car_vendor_id
		  WHERE
		    NOT TOL.deleted
		
		  UNION ALL
		
		  SELECT
		    order_date,
		    cash,
		    non_cash,
		    terminal,
		    CASE 
		      WHEN 
		        is_person AND
		        COALESCE(cash, 0) > 0 AND 
		        COALESCE(non_cash, 0) = 0 AND 
		        COALESCE(terminal, 0) = 0  AND 
		        (COALESCE(cash, 0) + COALESCE(non_cash, 0) + COALESCE(terminal, 0) + COALESCE(discount, 0))::numeric > 0
		      THEN 
		        round(COALESCE(discount, 0)::numeric / (COALESCE(cash, 0) + COALESCE(non_cash, 0) + COALESCE(terminal, 0) + COALESCE(discount, 0))::numeric * 100, 1)
		      ELSE 
		        0
		    END  discount_percent,
		    order_number,
		    shift_id,
		    tire_truck_order_id,
		    'tire_truck',
		    'Грузовой шиномонтаж' || ' (' || CV.title || ' ' || COALESCE(CM.title, '') || ')'
		  FROM
		    wash.tire_truck_order_list TOL
		    INNER JOIN wash.car C ON C.car_id = TOL.car_id
		    INNER JOIN wash.car_model CM ON CM.car_model_id = C.car_model_id
		    INNER JOIN wash.car_vendor CV ON CV.car_vendor_id = CM.car_vendor_id
		  WHERE
		    NOT TOL.deleted
		
		  UNION ALL
		
		  SELECT
		    deposit_date,
		    summ AS cash,
		    0,
		    0,
		    0,
		    NULL,
		    shift_id,
		    deposit_id,
		    'deposit',
		    'Внесение в кассу'
		  FROM
		    wash.deposit
		
		  UNION ALL
		
		  SELECT
		    withdrawal_date,
		    -summ AS cash,
		    0,
		    0,
		    0,
		    NULL,
		    shift_id,
		    withdrawal_id,
		    'withdrawal',
		    'Снятие из кассы'
		  FROM
		    wash.withdrawal
		) table1
		WHERE
		(
		  (
		    {ShiftId} IS NULL AND 
		    shift_id IN (SELECT shift_id FROM wash.shift WHERE start_time::date >= {StartDate}::date AND start_time::date <![CDATA[<=]]> {EndDate}::date)
		  )
		  OR 
		  (
		    {ShiftId} IS NOT NULL AND 
		    shift_id = {ShiftId}
		  )
		)
		ORDER BY "OrderDate", "OrderType";
      </Text>
    </SqlQuery>

    <SqlQuery Name="ReportNonCashSelectSqlQuery">
      <Text>
        SELECT
          OL.order_id AS "OrderId",
          OL.order_date AS "OrderDate",
          (
            SELECT 
              CV.title || ' ' || COALESCE(CM.title, '') || COALESCE(' (' || (SELECT car_number FROM wash.car WHERE car_id = OL.car_id) || ')', '')
            FROM 
              wash.car_vendor CV
              INNER JOIN wash.car_model CM ON CM.car_vendor_id = CV.car_vendor_id 
            WHERE 
              CM.car_model_id = (SELECT car_model_id FROM wash.car WHERE car_id = OL.car_id)
          ) AS "Car",
          (SELECT Ca.title FROM wash.car C INNER JOIN wash.car_model CM ON CM.car_model_id = C.car_model_id INNER JOIN wash.category Ca ON Ca.category_id =  CM.category_id WHERE car_id = OL.car_id) AS "Category",
          OL.cash + OL.non_cash + OL.terminal AS "Summ",
          OL.non_cash AS "NonCash",
          array_to_string(( 
            SELECT 
              array_agg(T.work) 
            FROM (
              SELECT
                CASE 
                  WHEN 
                    category_key = 'truck_spec'
                  THEN 
                    part_number || '.' || work_number || '. ' || title || ' [СПЕЦСРЕДСТВА]' || '; '
                  WHEN 
                    category_key != 'truck_spec'
                  THEN 
                    part_number || '.' || work_number || '. ' || title || '; '
                  ELSE 
                    title || '; '
                END AS work 
              FROM (
                SELECT 
                  W.title, order_id, work_number, category_key, part_number
                FROM
                  wash.work W
                  INNER JOIN wash.price P ON P.work_id = W.work_id
                  INNER JOIN wash.order_work OW ON OW.price_id = P.price_id
                  INNER JOIN wash.category C ON P.category_id = C.category_id
                  INNER JOIN wash.part Pa ON Pa.part_id = W.part_id
                UNION ALL
                SELECT
                  title, order_id, NULL, NULL, NULL
                FROM
                  wash.order_other_work
                UNION ALL
                SELECT
                  W.title, order_id, NULL, NULL, NULL
                FROM
                  wash.work W
                  INNER JOIN wash.price P ON P.work_id = W.work_id
                  INNER JOIN wash.order_product OP ON OP.price_id = P.price_id
                ORDER BY 
                  part_number, work_number
              ) Works
            WHERE
              order_id = OL.order_id
            ) T
            ), E'\r\n'
          ) as "Works",
          'wash' AS "OrderType"
        FROM 
          wash.order_list OL
        WHERE 
          OL.order_date::date >= {StartDate}::date
          AND OL.order_date::date <![CDATA[<=]]> {EndDate}::Date
          AND (SELECT client_id FROM wash.car WHERE car_id = OL.car_id) = {ClientId}
          AND NOT is_person
          AND NOT deleted
        
        UNION ALL
        
        SELECT
          TOL.tire_order_id AS "OrderId",
          TOL.order_date AS "OrderDate",
          (
            SELECT 
              CV.title || ' ' || COALESCE(CM.title, '') || COALESCE(' (' || (SELECT car_number FROM wash.car WHERE car_id = TOL.car_id) || ')', '')
            FROM 
              wash.car_vendor CV
              INNER JOIN wash.car_model CM ON CM.car_vendor_id = CV.car_vendor_id
            WHERE 
              CM.car_model_id = (SELECT car_model_id FROM wash.car WHERE car_id = TOL.car_id)
          ) as "Car",
          (SELECT Ca.title FROM wash.car C INNER JOIN wash.car_model CM ON CM.car_model_id = C.car_model_id INNER JOIN wash.category Ca ON Ca.category_id =  CM.category_id WHERE car_id = TOL.car_id) AS "Category",
          TOL.cash + TOL.non_cash + TOL.terminal AS "Summ",
          TOL.non_cash AS "NonCash",
          array_to_string(( 
            SELECT 
              array_agg(T.work) 
            FROM (
              SELECT 
                CASE
                  WHEN 
                    category_key LIKE 'tire%'
                  THEN
                    work_number || '. ' || title || ' (' || (SELECT title FROM wash.category WHERE category_key = Works.category_key) || ')' || '; '
                  ELSE
                    title || '; '
                END 
                AS work
              FROM(
                SELECT 
                  W.title, tire_order_id, work_number, category_key
                FROM
                  wash.work W
                  INNER JOIN wash.price P ON P.work_id = W.work_id
                  INNER JOIN wash.tire_order_work OW ON OW.price_id = P.price_id
                  INNER JOIN wash.category C ON P.category_id = C.category_id
                UNION ALL
                SELECT
                  title, tire_order_id, NULL, NULL
                FROM
                  wash.tire_order_other_work
                UNION ALL
                SELECT
                  W.title, tire_order_id, NULL, NULL
                FROM
                  wash.work W
                  INNER JOIN wash.price P ON P.work_id = W.work_id
                  INNER JOIN wash.tire_order_product OP ON OP.price_id = P.price_id
                ORDER BY
                  work_number
              ) Works
              WHERE
                tire_order_id = TOL.tire_order_id
              ORDER BY
                work
              ) T
            ), E'\r\n'
          ) as "Works",
          'tire' AS "OrderType"
        FROM
          wash.tire_order_list TOL
        WHERE 
          TOL.order_date::date >= {StartDate}::date 
          AND TOL.order_date::date <![CDATA[<=]]> {EndDate}::Date
          AND (SELECT client_id FROM wash.car WHERE car_id = TOL.car_id) = {ClientId}
          AND NOT is_person
          AND NOT deleted
          
        UNION ALL
        
        SELECT
          TOL.tire_truck_order_id AS "OrderId",
          TOL.order_date AS "OrderDate",
          (
            SELECT 
              CV.title || ' ' || COALESCE(CM.title, '') || COALESCE(' (' || (SELECT car_number FROM wash.car WHERE car_id = TOL.car_id) || ')', '')
            FROM 
              wash.car_vendor CV
              INNER JOIN wash.car_model CM ON CM.car_vendor_id = CV.car_vendor_id
            WHERE 
              CM.car_model_id = (SELECT car_model_id FROM wash.car WHERE car_id = TOL.car_id)
          ) as "Car",
          (SELECT Ca.title FROM wash.car C INNER JOIN wash.car_model CM ON CM.car_model_id = C.car_model_id INNER JOIN wash.category Ca ON Ca.category_id =  CM.category_id WHERE car_id = TOL.car_id) AS "Category",
          TOL.cash + TOL.non_cash + TOL.terminal AS "Summ",
          TOL.non_cash AS "NonCash",
          array_to_string(( 
            SELECT 
              array_agg(T.work) 
            FROM (
              SELECT 
                CASE
                  WHEN 
                    category_key LIKE 't_truck%'
                  THEN
                    work_number || '. ' || title || ' (' || (SELECT title FROM wash.category WHERE category_key = Works.category_key) || ')' || '; '
                  ELSE
                    title || '; '
                END 
                AS work
              FROM(
                SELECT 
                  W.title, tire_truck_order_id, work_number, category_key
                FROM
                  wash.work W
                  INNER JOIN wash.price P ON P.work_id = W.work_id
                  INNER JOIN wash.tire_truck_order_work OW ON OW.price_id = P.price_id
                  INNER JOIN wash.category C ON P.category_id = C.category_id
                UNION ALL
                SELECT
                  title, tire_truck_order_id, NULL, NULL
                FROM
                  wash.tire_truck_order_other_work
                UNION ALL
                SELECT
                  W.title, tire_truck_order_id, NULL, NULL
                FROM
                  wash.work W
                  INNER JOIN wash.price P ON P.work_id = W.work_id
                  INNER JOIN wash.tire_truck_order_product OP ON OP.price_id = P.price_id
                ORDER BY
                  work_number
              ) Works
              WHERE
                tire_truck_order_id = TOL.tire_truck_order_id
              ORDER BY
                work
              ) T
            ), E'\r\n'
          ) as "Works",
          'tire_truck' AS "OrderType"
        FROM
          wash.tire_truck_order_list TOL
        WHERE 
          TOL.order_date::date >= {StartDate}::date 
          AND TOL.order_date::date <![CDATA[<=]]> {EndDate}::Date
          AND (SELECT client_id FROM wash.car WHERE car_id = TOL.car_id) = {ClientId}
          AND NOT is_person
          AND NOT deleted
        ORDER BY
          "OrderDate"
      </Text>
    </SqlQuery>

    <SqlQuery Name="ReportAllNonCashSelectSqlQuery">
      <Text>    
        SELECT 
          C.client_id AS "ClientId",
          C.title AS "ClientTitle",
          SUM(non_cash) AS "Summ",
          C.discount AS "Discount",
          C.report_date AS "EmailReportDate",
          CASE WHEN confirmed_discount !=0 THEN (SUM(non_cash)*(100-confirmed_discount)/1000)::integer*10 ELSE SUM(non_cash) END AS "TotalSumm",
          C.confirmed_discount AS "AppliedDiscount",
          C.prefix AS "Prefix",
          C.inn AS "INN",
          C.contract_date AS "ContractDate",
          C.contract_number AS "ContractNumber",
          C.choise AS "Choise",
          C.report_organization_id AS "OrganizationId",
          (SELECT organization_title FROM wash.organization O WHERE C.report_organization_id = O.organization_id) AS "OrganizationTitle",
          CASE WHEN C.choise THEN C.confirmed_discount IS NULL ELSE FALSE END AS "NullConfirm",
          CASE WHEN C.choise THEN C.report_organization_id IS NULL ELSE FALSE END AS "OrganizationNullConfirm"
        FROM
        wash.client C
        INNER JOIN wash.car ON car.client_id = C.client_id
        INNER JOIN (
        SELECT car_id, non_cash, order_date FROM wash.order_list WHERE NOT deleted
        UNION ALL SELECT car_id, non_cash, order_date FROM wash.tire_order_list WHERE NOT deleted
        UNION ALL SELECT car_id, non_cash, order_date FROM wash.tire_truck_order_list WHERE NOT deleted
        ) t ON t.car_id = car.car_id
        WHERE NOT C.is_person
        AND t.order_date::date >= {StartDate}::date 
        AND t.order_date::date <![CDATA[<=]]> {EndDate}::date
        GROUP BY C.client_id, "ClientTitle",C.discount,C.report_date,C.confirmed_discount,C.prefix,C.inn ,C.contract_date, C.contract_number,C.choise,C.report_organization_id
        ORDER BY "ClientTitle"
          
      </Text>
    </SqlQuery>


    <SqlQuery Name="ClientReportDateUpdateSqlQuery">
      <Text>
        UPDATE
        wash.client
        SET report_date=now()
        WHERE client_id = {ClientId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="AllClientConfirmDiscountUpdateSqlQuery">
      <Text>
        UPDATE
        wash.client
        SET confirmed_discount=CASE WHEN {ConfirmedDiscount} THEN client.discount ELSE NULL END;
      </Text>
    </SqlQuery>

    <SqlQuery Name="AllClientSetOrganizationUpdateSqlQuery"> <!-- [не используется][mfedosov] -->
      <Text>
        UPDATE
        wash.client
        SET report_organization_id={OrganizationId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientConfirmDiscountUpdateSqlQuery">
      <Text>
        UPDATE
        wash.client
        SET confirmed_discount=CASE WHEN {ConfirmedDiscount} THEN client.discount ELSE 0 END
        WHERE client_id={ClientId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientReportOrganizationUpdateSqlQuery">
      <Text>
        UPDATE
        wash.client
        SET report_organization_id={OrganizationId}
        WHERE client_id={ClientId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="AllClientChoiseUpdateSqlQuery">
      <Text>
        UPDATE
        wash.client
        SET choise={Choise}, report_organization_id = NULL;
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientChoiseUpdateSqlQuery">
      <Text>
        UPDATE
        wash.client
        SET choise={Choise}
        WHERE client_id={ClientId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="ReportIncomeSelectSqlQuery">
      <Text>
        WITH 
          report 
        AS (
          SELECT *
          FROM(
            SELECT 
              COALESCE(work_cash, 0) wc,
              COALESCE(work_terminal, 0) wt,
              COALESCE(work_non_cash, 0) wn,
              COALESCE(product_cash, 0) pc,
              COALESCE(product_terminal, 0) pt,
              COALESCE(product_non_cash, 0) pn,
              shift_id,
              'wash' order_type
            FROM
              wash.get_income('wash')
            UNION ALL
            SELECT 
              COALESCE(work_cash, 0),
              COALESCE(work_terminal, 0),
              COALESCE(work_non_cash, 0),
              COALESCE(product_cash, 0),
              COALESCE(product_terminal, 0),
              COALESCE(product_non_cash, 0),
              shift_id,
              'tire'
            FROM
            wash.get_income('tire')
            UNION ALL
            SELECT 
              COALESCE(work_cash, 0),
              COALESCE(work_terminal, 0),
              COALESCE(work_non_cash, 0),
              COALESCE(product_cash, 0),
              COALESCE(product_terminal, 0),
              COALESCE(product_non_cash, 0),
              shift_id,
              'tire_truck'
            FROM
              wash.get_income('tire_truck')
            UNION ALL
            SELECT
              COALESCE(summ, 0), 0, 0, 0, 0, 0,
              shift_id,
              'deposit'
            FROM
              wash.deposit
            ) S
          WHERE
            (({ShiftId} ISNULL
            AND shift_id IN (SELECT shift_id FROM wash.shift WHERE start_time::date >= {StartDate}::date AND start_time::date <![CDATA[<=]]> {EndDate}::date)
            )
            OR ({ShiftId} IS NOT NULL
            AND shift_id = {ShiftId}))
        )
        SELECT
          'Автомойка' AS "Title",
          (SELECT COALESCE(SUM(wc), 0) FROM report WHERE order_type = 'wash') AS "Cash",
          (SELECT COALESCE(SUM(wt), 0) FROM report WHERE order_type = 'wash') AS "Terminal",
          (SELECT COALESCE(SUM(wn), 0) FROM report WHERE order_type = 'wash') AS "NonCash",
          (SELECT COALESCE(SUM(wc + wt + wn), 0) FROM report WHERE order_type = 'wash') AS "Total",
          1 AS "Order"
        UNION ALL
        SELECT
          'Продажи (автомойка)',
          (SELECT COALESCE(SUM(pc), 0) FROM report WHERE order_type = 'wash'),
          (SELECT COALESCE(SUM(pt), 0) FROM report WHERE order_type = 'wash'),
          (SELECT COALESCE(SUM(pn), 0) FROM report WHERE order_type = 'wash'),
          (SELECT COALESCE(SUM(pc + pt + pn), 0) FROM report WHERE order_type = 'wash'),
          2
        UNION ALL
        SELECT
          'Легковой шиномонтаж',
          (SELECT COALESCE(SUM(wc), 0) FROM report WHERE order_type = 'tire'),
          (SELECT COALESCE(SUM(wt), 0) FROM report WHERE order_type = 'tire'),
          (SELECT COALESCE(SUM(wn), 0) FROM report WHERE order_type = 'tire'),
          (SELECT COALESCE(SUM(wc + wt + wn), 0) FROM report WHERE order_type = 'tire'),
          3
        UNION ALL
        SELECT
          'Продажи (легковой шиномонтаж)',
          (SELECT COALESCE(SUM(pc), 0) FROM report WHERE order_type = 'tire'),
          (SELECT COALESCE(SUM(pt), 0) FROM report WHERE order_type = 'tire'),
          (SELECT COALESCE(SUM(pn), 0) FROM report WHERE order_type = 'tire'),
          (SELECT COALESCE(SUM(pc + pt + pn), 0) FROM report WHERE order_type = 'tire'),
          4
        UNION ALL
        SELECT
          'Грузовой шиномонтаж',
          (SELECT COALESCE(SUM(wc), 0) FROM report WHERE order_type = 'tire_truck'),
          (SELECT COALESCE(SUM(wt), 0) FROM report WHERE order_type = 'tire_truck'),
          (SELECT COALESCE(SUM(wn), 0) FROM report WHERE order_type = 'tire_truck'),
          (SELECT COALESCE(SUM(wc + wt + wn), 0) FROM report WHERE order_type = 'tire_truck'),
          5
        UNION ALL
          SELECT
          'Продажи (грузовой шиномонтаж)',
          (SELECT COALESCE(SUM(pc), 0) FROM report WHERE order_type = 'tire_truck'),
          (SELECT COALESCE(SUM(pt), 0) FROM report WHERE order_type = 'tire_truck'),
          (SELECT COALESCE(SUM(pn), 0) FROM report WHERE order_type = 'tire_truck'),
          (SELECT COALESCE(SUM(pc + pt + pn), 0) FROM report WHERE order_type = 'tire_truck'),
          6
        UNION ALL
        SELECT
          'Иной приход',
          (SELECT COALESCE(SUM(wc), 0) FROM report WHERE order_type = 'deposit'),
          0,
          0,
          (SELECT COALESCE(SUM(wc), 0) FROM report WHERE order_type = 'deposit'),
          7
        UNION ALL
        SELECT
          'ВСЕГО',
          (SELECT COALESCE(SUM(wc + pc), 0) FROM report),
          (SELECT COALESCE(SUM(wt + pt), 0) FROM report),  
          (SELECT COALESCE(SUM(wn + pn), 0) FROM report),
          (SELECT COALESCE(SUM(wc + wt + wn + pc + pt + pn), 0) FROM report),
          8
        ORDER BY
        "Order"
      </Text>
    </SqlQuery>

    <SqlQuery Name="ReportForSalarySelectSqlQuery">
      <Text>
        SELECT 
        (
          SELECT 
            COALESCE(SUM(order_service.summ), 0)
          FROM
            (
              SELECT order_id, price * quantity AS summ FROM wash.order_work UNION ALL
              SELECT order_id, price * quantity AS summ FROM wash.order_other_work
            ) AS order_service
            JOIN wash.order_list OL USING(order_id)
          WHERE 
            NOT deleted
            AND (({ShiftId} ISNULL
            AND shift_id IN (SELECT shift_id FROM wash.shift WHERE start_time::date >= {StartDate}::date AND start_time::date <![CDATA[<=]]> {EndDate}::date))
            OR ({ShiftId} IS NOT NULL
            AND shift_id = {ShiftId}))
        ) AS "Summ",
        'Автомойка' AS "Title",
        1 AS "Order"
        UNION ALL
        SELECT
        (
          SELECT 
            COALESCE(SUM(order_service.summ), 0)
          FROM
            (
              SELECT tire_order_id, price * quantity AS summ FROM wash.tire_order_work UNION ALL
              SELECT tire_order_id, price * quantity AS summ FROM wash.tire_order_other_work
            ) AS order_service
            JOIN wash.tire_order_list TOL USING(tire_order_id)
          WHERE 
            NOT deleted
            AND (({ShiftId} ISNULL
            AND shift_id IN (SELECT shift_id FROM wash.shift WHERE start_time::date >= {StartDate}::date AND start_time::date <![CDATA[<=]]> {EndDate}::date))
            OR ({ShiftId} IS NOT NULL
            AND shift_id = {ShiftId}))
        ),
          'Легковой шиномонтаж',
          2
        UNION ALL
        SELECT
        (
          SELECT 
            COALESCE(SUM(order_service.summ), 0)
          FROM
            (
              SELECT tire_truck_order_id, price * quantity AS summ FROM wash.tire_truck_order_work UNION ALL
              SELECT tire_truck_order_id, price * quantity AS summ FROM wash.tire_truck_order_other_work
            ) order_service
            JOIN wash.tire_truck_order_list TOL USING(tire_truck_order_id)
          WHERE 
            NOT deleted
            AND (({ShiftId} ISNULL
            AND shift_id IN (SELECT shift_id FROM wash.shift WHERE start_time::date >= {StartDate}::date AND start_time::date <![CDATA[<=]]> {EndDate}::date))
            OR ({ShiftId} IS NOT NULL
            AND shift_id = {ShiftId}))
        ),
          'Грузовой шиномонтаж',
          3
        ORDER BY
          "Order"
      </Text>
    </SqlQuery>

    <SqlQuery Name="ReportOutcomeSelectSqlQuery">
      <Text>
        UPDATE 
        wash.shift
        SET 
        wash_salary = wash.count_salary((SELECT MAX(shift_id) FROM wash.shift), 'wash'),
        tire_salary = wash.count_salary((SELECT MAX(shift_id) FROM wash.shift), 'tire'),
        tire_truck_salary = wash.count_salary((SELECT MAX(shift_id) FROM wash.shift), 'tire_truck')
        WHERE
        shift_id = (SELECT MAX(shift_id) FROM wash.shift);
        
        WITH shifts AS (
          SELECT shift_id 
          FROM wash.shift 
          WHERE (({ShiftId} ISNULL AND shift_id IN (SELECT shift_id FROM wash.shift WHERE start_time::date >= {StartDate}::date AND start_time::date <![CDATA[<=]]> {EndDate}::date))
            OR ({ShiftId} IS NOT NULL AND shift_id = {ShiftId}))
        ),
        withdrawals
        AS (
          SELECT 
            'З/п мойщикам' AS title, 
            (SELECT COALESCE(SUM(wash_salary), 0) FROM wash.shift WHERE shift_id IN (SELECT * FROM shifts)) AS summ,
            False AS deleted
          UNION ALL
          SELECT 
            'З/п легковой шиномонтаж' AS title, 
            (SELECT COALESCE(SUM(tire_salary), 0) FROM wash.shift WHERE shift_id IN (SELECT * FROM shifts)) AS summ,
            False
          UNION ALL
            SELECT 
            'З/п грузовой шиномонтаж' AS title, 
            (SELECT COALESCE(SUM(tire_truck_salary), 0) FROM wash.shift WHERE shift_id IN (SELECT * FROM shifts)) AS summ,
            False
          UNION ALL
          SELECT 
            'Доплата мойщикам (ночные)' AS title, 
            (SELECT COALESCE(SUM(summ), 0) FROM wash.withdrawal W WHERE withdrawal_type_id = 2 AND shift_id IN (SELECT * FROM shifts)) AS summ,
            False
          UNION ALL
          SELECT 
            'Доплата шиномонтаж (до min)' AS title, 
            (SELECT COALESCE(SUM(summ), 0) FROM wash.withdrawal W WHERE withdrawal_type_id = 3 AND shift_id IN (SELECT * FROM shifts)) AS summ,
            False
          UNION ALL
          SELECT null, null, False
          UNION ALL
          SELECT 
            title, 
            (SELECT COALESCE(SUM(summ), 0) FROM wash.withdrawal WHERE withdrawal_type_id = W.withdrawal_type_id AND shift_id IN (SELECT * FROM shifts)),
            deleted
          FROM 
            (SELECT WT.withdrawal_type_id, title, deleted FROM wash.withdrawal_type WT WHERE WT.withdrawal_type_id > 3 ORDER BY title) W
          UNION ALL 
          SELECT null, null, False
        )
        SELECT 
          title AS "Title", 
          -summ AS "Summ"
        FROM 
          withdrawals
        WHERE 
          NOT deleted
          OR ABS(summ) > 0
          
        UNION ALL
        SELECT 'Всего расходов из кассы', -COALESCE(SUM(summ), 0) 
        FROM withdrawals
      </Text>
    </SqlQuery>

    <SqlQuery Name="ReportOtherIncomeSelectSqlQuery">
      <Text>
        SELECT
          *
        FROM(
          WITH shifts AS (
            SELECT shift_id 
            FROM wash.shift 
            WHERE (({ShiftId} ISNULL AND shift_id IN (SELECT shift_id FROM wash.shift WHERE start_time::date >= {StartDate}::date AND start_time::date <![CDATA[<=]]> {EndDate}::date))
              OR ({ShiftId} IS NOT NULL AND shift_id = {ShiftId}))
            )
          SELECT     
            title AS "Title",  
            (SELECT COALESCE(SUM(summ), 0) AS summ FROM wash.deposit WHERE deposit_type_id = W.deposit_type_id AND shift_id IN (SELECT * FROM shifts)) AS "Summ",
            deleted
          FROM 
            (SELECT WT.deposit_type_id, title, deleted FROM wash.deposit_type WT ORDER BY title) W
          
          UNION ALL
          SELECT null, null, False
          
          UNION ALL
          SELECT 
            'Всего иных приходов в кассу', 
            COALESCE(SUM(summ), 0),
            False
          FROM
            wash.deposit
          WHERE 
            shift_id IN (SELECT * FROM shifts)
        ) x
        WHERE
          NOT deleted
          OR "Summ" > 0
      </Text>
    </SqlQuery>

    <SqlQuery Name="ReportProductSelectSqlQuery">
      <Text>
        <![CDATA[
        SELECT
          {StartDate} AS "StartDate",
          {EndDate} AS "EndDate",
          (SELECT title FROM wash.work W INNER JOIN wash.price P ON P.work_id = W.work_id WHERE Product.price_id = P.price_id) AS "Title",
          SUM(quantity) AS "Quantity",
          SUM(quantity * price) AS "Summ"
        FROM
        (
        SELECT
          price_id,
          quantity,
          price
        FROM
          wash.order_product OP
        WHERE
          order_id IN (SELECT order_id FROM wash.order_list OL INNER JOIN wash.shift S ON S.shift_id = OL.shift_id WHERE NOT OL.deleted AND S.start_time::date >= {StartDate}::date AND S.start_time::date <= {EndDate}::date)
        
        UNION ALL
        SELECT
          price_id,
          quantity,
          price
        FROM
          wash.tire_order_product OP
        WHERE
          tire_order_id IN (SELECT tire_order_id FROM wash.tire_order_list TOL INNER JOIN wash.shift S ON S.shift_id = TOL.shift_id WHERE NOT TOL.deleted AND S.start_time::date >= {StartDate}::date AND S.start_time::date <= {EndDate}::date)
        
        UNION ALL
        SELECT
          price_id,
          quantity,
          price
        FROM
          wash.tire_truck_order_product OP
        WHERE
          tire_truck_order_id IN (SELECT tire_truck_order_id FROM wash.tire_truck_order_list TOL INNER JOIN wash.shift S ON S.shift_id = TOL.shift_id WHERE NOT TOL.deleted AND S.start_time::date >= {StartDate}::date AND S.start_time::date <= {EndDate}::date)
        ) Product
        
        GROUP BY
          "Title"
        ORDER BY
          "Title"
        ]]>
      </Text>
    </SqlQuery>

    <SqlQuery Name="ReportWorkTitleSelectSqlQuery">
      <Text>
        <![CDATA[
        
        SELECT
          W.title AS "Title",
          COALESCE(SUM(count), 0) AS "Quantity",
          price_type AS "Type"
        FROM
          wash.work W
          INNER JOIN wash.part ON part.part_id = W.part_id
          LEFT JOIN(
          SELECT 
            P.work_id,
            COUNT(*) AS count
          FROM
            wash.order_work OW
            LEFT JOIN wash.order_list OL ON OL.order_id = OW.order_id
            LEFT JOIN wash.price P ON OW.price_id = P.price_id
          WHERE
            OL.shift_id IN (SELECT shift_id FROM wash.shift WHERE start_time::date >= {StartDate}::date AND start_time::date <= {EndDate}::date)
          GROUP BY
            P.work_id
          ) OW ON W.work_id = OW.work_id
        WHERE
          work_number IS NOT NULL
        GROUP BY
          W.title,
          price_type
        ORDER BY
          "Quantity" DESC,
          W.title
        ]]>
      </Text>
    </SqlQuery>

    <SqlQuery Name="ReportWorkOrderSelectSqlQuery">
      <Text>
        <![CDATA[
        SELECT
          W.title AS "Title",
          OW.order_id AS "OrderId",
          'Заказ-наряд № ' || OL.order_number || ' от ' || to_char(OL.order_date, 'DD.MM.YYYY HH24:MI') AS "Order"
        FROM
          wash.order_work OW
          LEFT JOIN wash.order_list OL ON OL.order_id = OW.order_id
          LEFT JOIN wash.price P ON OW.price_id = P.price_id
          LEFT JOIN wash.work W ON W.work_id = P.work_id
        WHERE
          OL.shift_id IN (SELECT shift_id FROM wash.shift WHERE start_time::date >= {StartDate}::date AND start_time::date <= {EndDate}::date)
        ORDER BY
          OL.order_date
        ]]>
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrganizationSelectSqlQuery">
      <Text>
        SELECT
          organization_id AS "OrganizationId",
          organization_title AS "Title"
        FROM
          wash.organization
        ORDER BY
          organization_id
      </Text>
    </SqlQuery>

    <SqlQuery Name="SettingsSelectSqlQuery">
      <Text>
        SELECT
          to_char((MAX(COALESCE(prefix::integer,0))+1), 'FM00000MI' ) AS "Prefix"
        FROM
          wash.client
      </Text>
    </SqlQuery>

  </SqlQueries>
  <Permissions>
    <!--разрешение на выполнение запросов общего назначения-->
    <Permission Name="CommonSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="PermissionsSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <!--разрешение на просмотр пользователей для регистрации-->
    <Permission Name="ViewLoginUserSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="LoginUserSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <!--разрешение на просмотр последних входивших пользователей-->
    <Permission Name="ViewLastLoginSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="LastLoginSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <!--разрешение на управление последними входившими пользователями-->
    <Permission Name="ManageLastLoginSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="LastLoginInsertUpdateSqlQuery" />
        <SqlQuery Name="LastLoginUpdateSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ViewUserSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="PublicUserSelectSqlQuery" />
        <SqlQuery Name="UserSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ManageUserSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="UserInsertSqlQuery" />
        <SqlQuery Name="UserUpdateSqlQuery" />
        <SqlQuery Name="UserDeleteSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ViewGroupSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="GroupSelectSqlQuery" />
        <SqlQuery Name="GroupGroupSelectSqlQuery" />
        <SqlQuery Name="UserGroupSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ManageGroupSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="GroupUpdateSqlQuery" />
        <SqlQuery Name="GroupGroupInsertSqlQuery" />
        <SqlQuery Name="GroupGroupUpdateSqlQuery" />
        <SqlQuery Name="GroupGroupDeleteSqlQuery" />
        <SqlQuery Name="UserGroupInsertSqlQuery" />
        <SqlQuery Name="UserGroupUpdateSqlQuery" />
        <SqlQuery Name="UserGroupDeleteSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ViewOrdersSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="OrderMainSelectSqlQuery" />
        <SqlQuery Name="OrderItemSelectSqlQuery" />
        <SqlQuery Name="TireOrderItemSelectSqlQuery" />
        <SqlQuery Name="TireTruckOrderItemSelectSqlQuery" />
        <SqlQuery Name="OrderDataCheckSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="EditOrdersSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="OrderInsertSelectSqlQuery" />
        <SqlQuery Name="TireOrderInsertSelectSqlQuery" />
        <SqlQuery Name="TireTruckOrderInsertSelectSqlQuery" />
        <SqlQuery Name="OrderFakeDeleteSqlQuery" />
        <SqlQuery Name="OrderDeleteSqlQuery" />
        <SqlQuery Name="TireOrderDeleteSqlQuery" />
        <SqlQuery Name="TireTruckOrderDeleteSqlQuery" />
        <SqlQuery Name="OrderSaveSqlQuery" />
        <SqlQuery Name="TireOrderSaveSqlQuery" />
        <SqlQuery Name="TireTruckOrderSaveSqlQuery" />
        <SqlQuery Name="OrderEditSaveSqlQuery" />
        <SqlQuery Name="TireOrderEditSaveSqlQuery" />
        <SqlQuery Name="TireTruckOrderEditSaveSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ViewCarsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="CarVendorSelectSqlQuery" />
        <SqlQuery Name="CarModelSelectSqlQuery" />
        <SqlQuery Name="CategorySelectSqlQuery" />
        <SqlQuery Name="CategoryWithTruckSelectSqlQuery" />
        <SqlQuery Name="CategoryTireSelectSqlQuery" />
        <SqlQuery Name="CategoryTireTruckSelectSqlQuery" />
        <SqlQuery Name="CarSelectSqlQuery" />
        <SqlQuery Name="CarItemSelectSqlQuery" />
        <SqlQuery Name="ClientCarSelectSqlQuery" />
        <SqlQuery Name="NewCarCheckSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ExtendedViewCarsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="CarModelItemSelectSqlQuery" />
        <SqlQuery Name="CarMainSelectSqlQuery" />
        <SqlQuery Name="CarModelCheckSelectSqlQuery" />
        <SqlQuery Name="CarVendorCheckSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="EditCarsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="CarVendorAndModelInsertSqlQuery" />
        <SqlQuery Name="CarInsertSqlQuery" />
        <SqlQuery Name="CarUpdateSqlQuery" />
        <SqlQuery Name="CarFakeDeleteSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="EmailSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="ClientEmailSelectSqlQuery" />
        <SqlQuery Name="EmailInsertSqlQuery" />
        <SqlQuery Name="EmailUpdateSqlQuery" />
        <SqlQuery Name="EmailDeleteSqlQuery" />
      </SqlQueries>
    </Permission>


    <Permission Name="ExtendedEditCarsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="CarModelInsertSqlQuery" />
        <SqlQuery Name="CarModelUpdateSqlQuery" />
        <SqlQuery Name="CarModelDeleteSqlQuery" />
        <SqlQuery Name="CarModelApproveUpdateSqlQuery" />
        <SqlQuery Name="CarVendorInsertSqlQuery" />
        <SqlQuery Name="CarVendorUpdateSqlQuery" />
        <SqlQuery Name="CarVendorDeleteSqlQuery" />
        <SqlQuery Name="CarModelMergeSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ViewClientsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="ClientSelectSqlQuery" />
        <SqlQuery Name="ClientAddressesSelectSqlQuery" />
        <SqlQuery Name="ClientWithCarsSelectSqlQuery" />
        <SqlQuery Name="ClientMainSelectSqlQuery" />
        <SqlQuery Name="ClientPageCountSelectSqlQuery" />
        <SqlQuery Name="IsClientAllowDeleteSelectSqlQuery" />
        <SqlQuery Name="LegalClientSelectSqlQuery" />
        <SqlQuery Name="ClientItemSelectSqlQuery" />
        <SqlQuery Name="SettingsSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ExtendedViewClientsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="ClientCheckSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="EditClientsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="ClientInsertSelectSqlQuery" />
        <SqlQuery Name="ClientInsertSqlQuery" />
        <SqlQuery Name="ClientUpdateSqlQuery" />
        <SqlQuery Name="ClientDeleteSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ViewWorksSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="WorkSelectSqlQuery" />
        <SqlQuery Name="WorkTruckSelectSqlQuery" />
        <SqlQuery Name="WorkTireSelectSqlQuery" />
        <SqlQuery Name="WorkTireTruckSelectSqlQuery" />
        <SqlQuery Name="ProductSelectSqlQuery" />
        <SqlQuery Name="OrderAllWorksSelectSqlQuery" />
        <SqlQuery Name="TireOrderAllWorksSelectSqlQuery" />
        <SqlQuery Name="TireTruckOrderAllWorksSelectSqlQuery" />
        <SqlQuery Name="PartPassSelectSqlQuery" />
        <SqlQuery Name="PartTruckSelectSqlQuery" />
        <SqlQuery Name="PartTireSelectSqlQuery" />
        <SqlQuery Name="PartTireTruckSelectSqlQuery" />
        <SqlQuery Name="PartProductSelectSqlQuery" />
        <SqlQuery Name="PricePassSelectSqlQuery" />
        <SqlQuery Name="PricePassPrintableSelectSqlQuery" />
        <SqlQuery Name="PriceTruckSelectSqlQuery" />
        <SqlQuery Name="PriceTruckPrintableSelectSqlQuery" />
        <SqlQuery Name="PriceTireSelectSqlQuery" />
        <SqlQuery Name="PriceTireTruckSelectSqlQuery" />
        <SqlQuery Name="PriceTirePrintableSelectSqlQuery" />
        <SqlQuery Name="PriceTireTruckPrintableSelectSqlQuery" />
        <SqlQuery Name="PriceProductSelectSqlQuery" />
        <SqlQuery Name="PriceProductPrintableSelectSqlQuery" />
        <SqlQuery Name="PartSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ExtendedViewWorksSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="PartCheckSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="EditWorksSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="OrderWorkInsertOrDeleteSqlQuery" />
        <SqlQuery Name="OrderWorkTruckInsertOrDeleteSqlQuery" />
        <SqlQuery Name="OrderWorkTireInsertOrDeleteSqlQuery" />
        <SqlQuery Name="OrderWorkTireTruckInsertOrDeleteSqlQuery" />
        <SqlQuery Name="OrderProductInsertOrDeleteSqlQuery" />
        <SqlQuery Name="OrderOtherWorkInsertSqlQuery" />
        <SqlQuery Name="OrderAnyWorkUpdateSqlQuery" />
        <SqlQuery Name="OrderAnyWorkDeleteSqlQuery" />
        <SqlQuery Name="TireOrderAnyWorkUpdateSqlQuery" />
        <SqlQuery Name="TireTruckOrderAnyWorkUpdateSqlQuery" />
        <SqlQuery Name="TireOrderAnyWorkDeleteSqlQuery" />
        <SqlQuery Name="TireTruckOrderAnyWorkDeleteSqlQuery" />
        <SqlQuery Name="OrderWorksRecountSqlQuery" />
        <SqlQuery Name="PricePassCopyInsertSqlQuery" />
        <SqlQuery Name="PriceTruckCopyInsertSqlQuery" />
        <SqlQuery Name="PricePassFakeDeleteSqlQuery" />
        <SqlQuery Name="PriceTruckFakeDeleteSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ExtendedEditWorksSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="PricePassInsertSqlQuery" />
        <SqlQuery Name="PricePassUpdateSqlQuery" />
        <SqlQuery Name="PriceTruckInsertSqlQuery" />
        <SqlQuery Name="PriceTruckUpdateSqlQuery" />
        <SqlQuery Name="PriceTireInsertSqlQuery" />
        <SqlQuery Name="PriceTireTruckInsertSqlQuery" />
        <SqlQuery Name="PriceTireUpdateSqlQuery" />
        <SqlQuery Name="PriceFakeDeleteSqlQuery" />
        <SqlQuery Name="PriceProductInsertSqlQuery" />
        <SqlQuery Name="PriceProductUpdateSqlQuery" />
        <SqlQuery Name="PartInsertSqlQuery" />
        <SqlQuery Name="PartUpdateSqlQuery" />
        <SqlQuery Name="PartDeleteSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ViewSettingsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="SettingSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="EditSettingsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="SettingUpdateSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ViewCategorySettingsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="CategoryDescriptionSelectSqlQuery" />
        <SqlQuery Name="CategoryDescriptionPrintableSelectSqlQuery" />
        <SqlQuery Name="TireCategorySelectSqlQuery" />
        <SqlQuery Name="TireTruckCategorySelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="EditCategorySettingsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="SettingUpdateSqlQuery" />
        <SqlQuery Name="CategoryDescriptionUpdateSqlQuery" />
        <SqlQuery Name="TireCategoryUpdateSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ViewEmailSettingSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="EmailSettingSelectSqlQuery" />
        <SqlQuery Name="EmailAddresseeSelectSqlQuery" />
        <SqlQuery Name="EmailSendSettingSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="EditEmailSettingSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="EmailSettingUpdateSqlQuery" />
        <SqlQuery Name="EmailAddresseeUpdateSqlQuery" />
        <SqlQuery Name="EmailSendSettingUpdateSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ViewMoneyTransactionsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="CashSelectSqlQuery" />
        <SqlQuery Name="CashItemSelectSqlQuery" />
        <SqlQuery Name="CashTypeSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="EditMoneyTransactionsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="CashDivideUpdateSqlQuery" />
        <SqlQuery Name="CashTypeInsertSqlQuery" />
        <SqlQuery Name="CashTypeUpdateSqlQuery" />
        <SqlQuery Name="CashTypeFakeDeleteSqlQuery" />
        <SqlQuery Name="CashInsertSqlQuery" />
        <SqlQuery Name="CashUpdateSqlQuery" />
        <SqlQuery Name="CashDeleteSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ViewAdminsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="WashAdminSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ExtendedEditAdminsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="WashAdminInsertSqlQuery" />
        <SqlQuery Name="WashAdminUpdateSqlQuery" />
        <SqlQuery Name="WashAdminFakeDeleteSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ViewShiftsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="ShiftSelectSqlQuery" />
        <SqlQuery Name="ShiftItemSelectSqlQuery" />
        <SqlQuery Name="ShiftCurrentSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="EditShiftsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="ShiftInsertSqlQuery" />
        <SqlQuery Name="ShiftUpdateSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ViewReportsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="ReportSelectSqlQuery" />
        <SqlQuery Name="ReportShiftSelectSqlQuery" />
        <SqlQuery Name="ReportHistorySelectSqlQuery" />
        <SqlQuery Name="ReportNonCashSelectSqlQuery" />
        <SqlQuery Name="ReportIncomeSelectSqlQuery" />
        <SqlQuery Name="ReportForSalarySelectSqlQuery" />
        <SqlQuery Name="ReportOutcomeSelectSqlQuery" />
        <SqlQuery Name="ReportOtherIncomeSelectSqlQuery" />
        <SqlQuery Name="ReportProductSelectSqlQuery" />
        <SqlQuery Name="ReportWorkTitleSelectSqlQuery" />
        <SqlQuery Name="ReportWorkOrderSelectSqlQuery" />
        <SqlQuery Name="OrganizationSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="SendEmailToLegalClientSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="ReportAllNonCashSelectSqlQuery" />
        <SqlQuery Name="ClientReportDateUpdateSqlQuery" />
        <SqlQuery Name="AllClientConfirmDiscountUpdateSqlQuery" />
        <SqlQuery Name="AllClientSetOrganizationUpdateSqlQuery" />
        <SqlQuery Name="ClientConfirmDiscountUpdateSqlQuery" />
        <SqlQuery Name="ClientReportOrganizationUpdateSqlQuery" />
        <SqlQuery Name="AllClientChoiseUpdateSqlQuery" />
        <SqlQuery Name="ClientChoiseUpdateSqlQuery" />
        <SqlQuery Name="OrganizationSelectSqlQuery" />
      </SqlQueries>
    </Permission>

    <Permission Name="ExtendedViewReportsSqlQueryPermission" Type="SqlQueryPermission">
      <SqlQueries>
        <SqlQuery Name="ReportPeriodSelectSqlQuery" />
      </SqlQueries>
    </Permission>
  </Permissions>
  <Roles>
    <Role Name="BaseRole">
      <Permissions>
        <Permission Name="CommonSqlQueryPermission" />
        <Permission Name="ViewLoginUserSqlQueryPermission" />
        <Permission Name="ViewLastLoginSqlQueryPermission" />
        <Permission Name="ManageLastLoginSqlQueryPermission" />
      </Permissions>
    </Role>

    <Role Name="WashAdminRole">
      <Permissions>
        <Permission Name="ViewOrdersSqlQueryPermission" />
        <Permission Name="EditOrdersSqlQueryPermission" />
        <Permission Name="ViewCarsSqlQueryPermission" />
        <Permission Name="EditCarsSqlQueryPermission" />
        <Permission Name="EmailSqlQueryPermission" />
        <Permission Name="ViewClientsSqlQueryPermission" />
        <Permission Name="EditClientsSqlQueryPermission" />
        <Permission Name="ViewWorksSqlQueryPermission" />
        <Permission Name="EditWorksSqlQueryPermission" />
        <Permission Name="ViewMoneyTransactionsSqlQueryPermission" />
        <Permission Name="EditMoneyTransactionsSqlQueryPermission" />
        <Permission Name="ViewAdminsSqlQueryPermission" />
        <Permission Name="ViewShiftsSqlQueryPermission" />
        <Permission Name="EditShiftsSqlQueryPermission" />
        <Permission Name="ViewReportsSqlQueryPermission" />
        <Permission Name="ViewEmailSettingSqlQueryPermission" />
        <Permission Name="EditEmailSettingSqlQueryPermission" />
      </Permissions>
    </Role>

    <Role Name="OwnerRole">
      <Permissions>
        <Permission Name="ExtendedViewCarsSqlQueryPermission" />
        <Permission Name="ExtendedEditCarsSqlQueryPermission" />
        <Permission Name="ExtendedViewClientsSqlQueryPermission" />
        <Permission Name="ExtendedViewWorksSqlQueryPermission" />
        <Permission Name="ExtendedEditWorksSqlQueryPermission" />
        <Permission Name="ViewSettingsSqlQueryPermission" />
        <Permission Name="EditSettingsSqlQueryPermission" />
        <Permission Name="ViewCategorySettingsSqlQueryPermission" />
        <Permission Name="EditCategorySettingsSqlQueryPermission" />
        <Permission Name="ExtendedEditAdminsSqlQueryPermission" />
        <Permission Name="ExtendedViewReportsSqlQueryPermission" />
        <Permission Name="SendEmailToLegalClientSqlQueryPermission" />
      </Permissions>
    </Role>

    <Role Name="AdministratorRole">
      <Permissions>
        <Permission Name="ViewUserSqlQueryPermission" />
        <Permission Name="ManageUserSqlQueryPermission" />
        <Permission Name="ViewGroupSqlQueryPermission" />
        <Permission Name="ManageGroupSqlQueryPermission" />
        <Permission Name="SendEmailToLegalClientSqlQueryPermission" />
      </Permissions>
    </Role>
  </Roles>
  <Groups>
    <Group Name="AdministratorGroup">
      <Roles>
        <Role Name="BaseRole" />
        <Role Name="WashAdminRole" />
        <Role Name="OwnerRole" />
        <Role Name="AdministratorRole" />
      </Roles>
    </Group>

    <!--группа "Владельцы процесса"-->
    <Group Name="OwnerGroup">
      <Roles>
        <Role Name="BaseRole" />
        <Role Name="WashAdminRole" />
        <Role Name="OwnerRole" />
      </Roles>
    </Group>

    <!--группа "Пользователи"-->
    <Group Name="WashAdminGroup">
      <Roles>
        <Role Name="BaseRole" />
        <Role Name="WashAdminRole" />
      </Roles>
    </Group>

    <!--группа "Не для регистрации"-->
    <Group Name="NotForRegisterGroup">
      <Roles>
        <Role Name="BaseRole" />
      </Roles>
    </Group>
  </Groups>
</Workflow>
